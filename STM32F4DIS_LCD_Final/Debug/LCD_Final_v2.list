
LCD_Final_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000296c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002af4  08002af4  00012af4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000026ec  20000000  08002b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000226ec  2**0
                  CONTENTS
  8 .bss          000000bc  200026ec  200026ec  000226ec  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200027a8  200027a8  000226ec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000226ec  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000edc9  00000000  00000000  0002271c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001fd5  00000000  00000000  000314e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003631  00000000  00000000  000334ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000608  00000000  00000000  00036af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  000370f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000360f  00000000  00000000  00037860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000256e  00000000  00000000  0003ae6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003d3dd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000013a4  00000000  00000000  0003d45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200026ec 	.word	0x200026ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002adc 	.word	0x08002adc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200026f0 	.word	0x200026f0
 80001c4:	08002adc 	.word	0x08002adc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b97a 	b.w	8000ca8 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	468c      	mov	ip, r1
 80009d2:	460d      	mov	r5, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	9e08      	ldr	r6, [sp, #32]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d151      	bne.n	8000a80 <__udivmoddi4+0xb4>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d96d      	bls.n	8000abe <__udivmoddi4+0xf2>
 80009e2:	fab2 fe82 	clz	lr, r2
 80009e6:	f1be 0f00 	cmp.w	lr, #0
 80009ea:	d00b      	beq.n	8000a04 <__udivmoddi4+0x38>
 80009ec:	f1ce 0c20 	rsb	ip, lr, #32
 80009f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80009fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a08:	0c25      	lsrs	r5, r4, #16
 8000a0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a0e:	fa1f f987 	uxth.w	r9, r7
 8000a12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a1a:	fb08 f309 	mul.w	r3, r8, r9
 8000a1e:	42ab      	cmp	r3, r5
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x6c>
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a28:	f080 8123 	bcs.w	8000c72 <__udivmoddi4+0x2a6>
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	f240 8120 	bls.w	8000c72 <__udivmoddi4+0x2a6>
 8000a32:	f1a8 0802 	sub.w	r8, r8, #2
 8000a36:	443d      	add	r5, r7
 8000a38:	1aed      	subs	r5, r5, r3
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a48:	fb00 f909 	mul.w	r9, r0, r9
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x98>
 8000a50:	19e4      	adds	r4, r4, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 810a 	bcs.w	8000c6e <__udivmoddi4+0x2a2>
 8000a5a:	45a1      	cmp	r9, r4
 8000a5c:	f240 8107 	bls.w	8000c6e <__udivmoddi4+0x2a2>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	eba4 0409 	sub.w	r4, r4, r9
 8000a68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d061      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000a72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a76:	2300      	movs	r3, #0
 8000a78:	6034      	str	r4, [r6, #0]
 8000a7a:	6073      	str	r3, [r6, #4]
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0xc8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d054      	beq.n	8000b32 <__udivmoddi4+0x166>
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a94:	fab3 f183 	clz	r1, r3
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	f040 808e 	bne.w	8000bba <__udivmoddi4+0x1ee>
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xdc>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2d0>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb65 0503 	sbc.w	r5, r5, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	46ac      	mov	ip, r5
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d03f      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000ab6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	b912      	cbnz	r2, 8000ac6 <__udivmoddi4+0xfa>
 8000ac0:	2701      	movs	r7, #1
 8000ac2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ac6:	fab7 fe87 	clz	lr, r7
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d134      	bne.n	8000b3a <__udivmoddi4+0x16e>
 8000ad0:	1beb      	subs	r3, r5, r7
 8000ad2:	0c3a      	lsrs	r2, r7, #16
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ade:	0c25      	lsrs	r5, r4, #16
 8000ae0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ae8:	fb0c f308 	mul.w	r3, ip, r8
 8000aec:	42ab      	cmp	r3, r5
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x134>
 8000af0:	19ed      	adds	r5, r5, r7
 8000af2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x132>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	f200 80d1 	bhi.w	8000ca0 <__udivmoddi4+0x2d4>
 8000afe:	4680      	mov	r8, r0
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b08:	fb02 5510 	mls	r5, r2, r0, r5
 8000b0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b10:	fb0c fc00 	mul.w	ip, ip, r0
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x15c>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x15a>
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	f200 80b8 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	e79d      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000b32:	4631      	mov	r1, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	f1ce 0420 	rsb	r4, lr, #32
 8000b3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b46:	fa20 f804 	lsr.w	r8, r0, r4
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b50:	ea48 0803 	orr.w	r8, r8, r3
 8000b54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b68:	fb01 f30c 	mul.w	r3, r1, ip
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1bc>
 8000b74:	19ed      	adds	r5, r5, r7
 8000b76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7a:	f080 808a 	bcs.w	8000c92 <__udivmoddi4+0x2c6>
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	f240 8087 	bls.w	8000c92 <__udivmoddi4+0x2c6>
 8000b84:	3902      	subs	r1, #2
 8000b86:	443d      	add	r5, r7
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	fa1f f588 	uxth.w	r5, r8
 8000b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b92:	fb02 3310 	mls	r3, r2, r0, r3
 8000b96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0x1e6>
 8000ba2:	19ed      	adds	r5, r5, r7
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	d26f      	bcs.n	8000c8a <__udivmoddi4+0x2be>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0x2be>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	443d      	add	r5, r7
 8000bb2:	1aeb      	subs	r3, r5, r3
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	e78f      	b.n	8000ada <__udivmoddi4+0x10e>
 8000bba:	f1c1 0720 	rsb	r7, r1, #32
 8000bbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc8:	ea48 0303 	orr.w	r3, r8, r3
 8000bcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000be2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000be6:	fa1f f883 	uxth.w	r8, r3
 8000bea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bee:	fb09 f408 	mul.w	r4, r9, r8
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x244>
 8000bfe:	18ed      	adds	r5, r5, r3
 8000c00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c04:	d243      	bcs.n	8000c8e <__udivmoddi4+0x2c2>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d941      	bls.n	8000c8e <__udivmoddi4+0x2c2>
 8000c0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0e:	441d      	add	r5, r3
 8000c10:	1b2d      	subs	r5, r5, r4
 8000c12:	fa1f fe8e 	uxth.w	lr, lr
 8000c16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c22:	fb00 f808 	mul.w	r8, r0, r8
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x26e>
 8000c2a:	18e4      	adds	r4, r4, r3
 8000c2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c30:	d229      	bcs.n	8000c86 <__udivmoddi4+0x2ba>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d927      	bls.n	8000c86 <__udivmoddi4+0x2ba>
 8000c36:	3802      	subs	r0, #2
 8000c38:	441c      	add	r4, r3
 8000c3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3e:	eba4 0408 	sub.w	r4, r4, r8
 8000c42:	fba0 8902 	umull	r8, r9, r0, r2
 8000c46:	454c      	cmp	r4, r9
 8000c48:	46c6      	mov	lr, r8
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	d315      	bcc.n	8000c7a <__udivmoddi4+0x2ae>
 8000c4e:	d012      	beq.n	8000c76 <__udivmoddi4+0x2aa>
 8000c50:	b156      	cbz	r6, 8000c68 <__udivmoddi4+0x29c>
 8000c52:	ebba 030e 	subs.w	r3, sl, lr
 8000c56:	eb64 0405 	sbc.w	r4, r4, r5
 8000c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431f      	orrs	r7, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	6037      	str	r7, [r6, #0]
 8000c66:	6074      	str	r4, [r6, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	e6f8      	b.n	8000a64 <__udivmoddi4+0x98>
 8000c72:	4690      	mov	r8, r2
 8000c74:	e6e0      	b.n	8000a38 <__udivmoddi4+0x6c>
 8000c76:	45c2      	cmp	sl, r8
 8000c78:	d2ea      	bcs.n	8000c50 <__udivmoddi4+0x284>
 8000c7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c82:	3801      	subs	r0, #1
 8000c84:	e7e4      	b.n	8000c50 <__udivmoddi4+0x284>
 8000c86:	4628      	mov	r0, r5
 8000c88:	e7d7      	b.n	8000c3a <__udivmoddi4+0x26e>
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	e791      	b.n	8000bb2 <__udivmoddi4+0x1e6>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e7be      	b.n	8000c10 <__udivmoddi4+0x244>
 8000c92:	4601      	mov	r1, r0
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0x1bc>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	e745      	b.n	8000b28 <__udivmoddi4+0x15c>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xe6>
 8000ca0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca4:	443d      	add	r5, r7
 8000ca6:	e72b      	b.n	8000b00 <__udivmoddi4+0x134>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_InitTick+0x3c>)
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_InitTick+0x40>)
{
 8000cb2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	7818      	ldrb	r0, [r3, #0]
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc4:	f000 f89c 	bl	8000e00 <HAL_SYSTICK_Config>
 8000cc8:	4604      	mov	r4, r0
 8000cca:	b958      	cbnz	r0, 8000ce4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	2d0f      	cmp	r5, #15
 8000cce:	d809      	bhi.n	8000ce4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f85e 	bl	8000d98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_InitTick+0x44>)
 8000cde:	4620      	mov	r0, r4
 8000ce0:	601d      	str	r5, [r3, #0]
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
 8000ce8:	20002684 	.word	0x20002684
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_Init>:
{
 8000cf4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x30>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cfe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f82f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffc8 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000d1c:	f001 fcb0 	bl	8002680 <HAL_MspInit>
}
 8000d20:	2000      	movs	r0, #0
 8000d22:	bd08      	pop	{r3, pc}
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x10>)
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_IncTick+0x14>)
 8000d2c:	6811      	ldr	r1, [r2, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	440b      	add	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20002728 	.word	0x20002728
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <HAL_GetTick+0x8>)
 8000d42:	6818      	ldr	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20002728 	.word	0x20002728

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fff6 	bl	8000d40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d54:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	bf1c      	itt	ne
 8000d58:	4b05      	ldrne	r3, [pc, #20]	; (8000d70 <HAL_Delay+0x24>)
 8000d5a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	bf18      	it	ne
 8000d60:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	f7ff ffed 	bl	8000d40 <HAL_GetTick>
 8000d66:	1b40      	subs	r0, r0, r5
 8000d68:	4284      	cmp	r4, r0
 8000d6a:	d8fa      	bhi.n	8000d62 <HAL_Delay+0x16>
  {
  }
}
 8000d6c:	bd38      	pop	{r3, r4, r5, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000000 	.word	0x20000000

08000d74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d84:	0200      	lsls	r0, r0, #8
 8000d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d8e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d90:	60d3      	str	r3, [r2, #12]
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b530      	push	{r4, r5, lr}
 8000d9c:	68dc      	ldr	r4, [r3, #12]
 8000d9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	bf28      	it	cs
 8000dac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 0501 	mov.w	r5, #1
 8000db4:	fa05 f303 	lsl.w	r3, r5, r3
 8000db8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbc:	bf8c      	ite	hi
 8000dbe:	3c03      	subhi	r4, #3
 8000dc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc6:	fa05 f404 	lsl.w	r4, r5, r4
 8000dca:	3c01      	subs	r4, #1
 8000dcc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000dce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	ea42 0201 	orr.w	r2, r2, r1
 8000dd4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	bfaf      	iteee	ge
 8000dda:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	f000 000f 	andlt.w	r0, r0, #15
 8000de2:	4b06      	ldrlt	r3, [pc, #24]	; (8000dfc <HAL_NVIC_SetPriority+0x64>)
 8000de4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	bfa5      	ittet	ge
 8000de8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000dec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000df4:	bd30      	pop	{r4, r5, pc}
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	e000ed14 	.word	0xe000ed14

08000e00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	3801      	subs	r0, #1
 8000e02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e06:	d20a      	bcs.n	8000e1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	21f0      	movs	r1, #240	; 0xf0
 8000e10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e2e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e30:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e32:	bf0c      	ite	eq
 8000e34:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e38:	f022 0204 	bicne.w	r2, r2, #4
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4770      	bx	lr
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e44:	4770      	bx	lr

08000e46 <HAL_SYSTICK_IRQHandler>:
{
 8000e46:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e48:	f7ff fffc 	bl	8000e44 <HAL_SYSTICK_Callback>
 8000e4c:	bd08      	pop	{r3, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001008 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5c:	4a68      	ldr	r2, [pc, #416]	; (8001000 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800100c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e64:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e66:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e6c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e70:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e74:	45b6      	cmp	lr, r6
 8000e76:	f040 80ae 	bne.w	8000fd6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	684c      	ldr	r4, [r1, #4]
 8000e7c:	f024 0710 	bic.w	r7, r4, #16
 8000e80:	2f02      	cmp	r7, #2
 8000e82:	d116      	bne.n	8000eb2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e88:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e90:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e94:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e98:	f04f 0c0f 	mov.w	ip, #15
 8000e9c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ea0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	690d      	ldr	r5, [r1, #16]
 8000ea6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000eaa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	f8ca 5020 	str.w	r5, [sl, #32]
 8000eb2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000eb8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebc:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ec0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eca:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ece:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ed6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eda:	d811      	bhi.n	8000f00 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000edc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ede:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	68cf      	ldr	r7, [r1, #12]
 8000ee4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ee8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000eec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ef8:	409f      	lsls	r7, r3
 8000efa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000efe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f00:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f02:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	688f      	ldr	r7, [r1, #8]
 8000f06:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f0a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f0c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0e:	00e5      	lsls	r5, r4, #3
 8000f10:	d561      	bpl.n	8000fd6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	f04f 0b00 	mov.w	fp, #0
 8000f16:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f1a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	4d39      	ldr	r5, [pc, #228]	; (8001004 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f24:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f28:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f2c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f30:	9703      	str	r7, [sp, #12]
 8000f32:	9f03      	ldr	r7, [sp, #12]
 8000f34:	f023 0703 	bic.w	r7, r3, #3
 8000f38:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f3c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f44:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f48:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f4c:	f04f 0e0f 	mov.w	lr, #15
 8000f50:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f54:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f56:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5a:	d043      	beq.n	8000fe4 <HAL_GPIO_Init+0x194>
 8000f5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d041      	beq.n	8000fe8 <HAL_GPIO_Init+0x198>
 8000f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d03f      	beq.n	8000fec <HAL_GPIO_Init+0x19c>
 8000f6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f70:	42a8      	cmp	r0, r5
 8000f72:	d03d      	beq.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000f74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f78:	42a8      	cmp	r0, r5
 8000f7a:	d03b      	beq.n	8000ff4 <HAL_GPIO_Init+0x1a4>
 8000f7c:	4548      	cmp	r0, r9
 8000f7e:	d03b      	beq.n	8000ff8 <HAL_GPIO_Init+0x1a8>
 8000f80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f84:	42a8      	cmp	r0, r5
 8000f86:	d039      	beq.n	8000ffc <HAL_GPIO_Init+0x1ac>
 8000f88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f8c:	42a8      	cmp	r0, r5
 8000f8e:	bf14      	ite	ne
 8000f90:	2508      	movne	r5, #8
 8000f92:	2507      	moveq	r5, #7
 8000f94:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f98:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f9e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	bf0c      	ite	eq
 8000fa8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000faa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000fac:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000fae:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	bf0c      	ite	eq
 8000fb6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fb8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000fba:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	bf0c      	ite	eq
 8000fc4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fc6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000fc8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000fca:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fcc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fce:	bf54      	ite	pl
 8000fd0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fd2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fd4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	2b10      	cmp	r3, #16
 8000fda:	f47f af44 	bne.w	8000e66 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fde:	b005      	add	sp, #20
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe4:	465d      	mov	r5, fp
 8000fe6:	e7d5      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8000fe8:	2501      	movs	r5, #1
 8000fea:	e7d3      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8000fec:	2502      	movs	r5, #2
 8000fee:	e7d1      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8000ff0:	2503      	movs	r5, #3
 8000ff2:	e7cf      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8000ff4:	2504      	movs	r5, #4
 8000ff6:	e7cd      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8000ff8:	2505      	movs	r5, #5
 8000ffa:	e7cb      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8000ffc:	2506      	movs	r5, #6
 8000ffe:	e7c9      	b.n	8000f94 <HAL_GPIO_Init+0x144>
 8001000:	40013c00 	.word	0x40013c00
 8001004:	40020000 	.word	0x40020000
 8001008:	40023800 	.word	0x40023800
 800100c:	40021400 	.word	0x40021400

08001010 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001010:	6903      	ldr	r3, [r0, #16]
 8001012:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001014:	bf14      	ite	ne
 8001016:	2001      	movne	r0, #1
 8001018:	2000      	moveq	r0, #0
 800101a:	4770      	bx	lr

0800101c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	b10a      	cbz	r2, 8001022 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101e:	6181      	str	r1, [r0, #24]
 8001020:	4770      	bx	lr
 8001022:	0409      	lsls	r1, r1, #16
 8001024:	e7fb      	b.n	800101e <HAL_GPIO_WritePin+0x2>
	...

08001028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	4604      	mov	r4, r0
 800102e:	b918      	cbnz	r0, 8001038 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001032:	b002      	add	sp, #8
 8001034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001038:	6803      	ldr	r3, [r0, #0]
 800103a:	07dd      	lsls	r5, r3, #31
 800103c:	d410      	bmi.n	8001060 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	0798      	lsls	r0, r3, #30
 8001042:	d458      	bmi.n	80010f6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	071a      	lsls	r2, r3, #28
 8001048:	f100 809a 	bmi.w	8001180 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	075b      	lsls	r3, r3, #29
 8001050:	f100 80b8 	bmi.w	80011c4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001054:	69a2      	ldr	r2, [r4, #24]
 8001056:	2a00      	cmp	r2, #0
 8001058:	f040 8119 	bne.w	800128e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800105c:	2000      	movs	r0, #0
 800105e:	e7e8      	b.n	8001032 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001060:	4ba6      	ldr	r3, [pc, #664]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	f002 020c 	and.w	r2, r2, #12
 8001068:	2a04      	cmp	r2, #4
 800106a:	d007      	beq.n	800107c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001072:	2a08      	cmp	r2, #8
 8001074:	d10a      	bne.n	800108c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	0259      	lsls	r1, r3, #9
 800107a:	d507      	bpl.n	800108c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b9f      	ldr	r3, [pc, #636]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	039a      	lsls	r2, r3, #14
 8001082:	d5dc      	bpl.n	800103e <HAL_RCC_OscConfig+0x16>
 8001084:	6863      	ldr	r3, [r4, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1d9      	bne.n	800103e <HAL_RCC_OscConfig+0x16>
 800108a:	e7d1      	b.n	8001030 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	4d9b      	ldr	r5, [pc, #620]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d111      	bne.n	80010ba <HAL_RCC_OscConfig+0x92>
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fe4f 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4d96      	ldr	r5, [pc, #600]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80010a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	039b      	lsls	r3, r3, #14
 80010aa:	d4c8      	bmi.n	800103e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fe48 	bl	8000d40 <HAL_GetTick>
 80010b0:	1b80      	subs	r0, r0, r6
 80010b2:	2864      	cmp	r0, #100	; 0x64
 80010b4:	d9f7      	bls.n	80010a6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e7bb      	b.n	8001032 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010be:	d104      	bne.n	80010ca <HAL_RCC_OscConfig+0xa2>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	602b      	str	r3, [r5, #0]
 80010c8:	e7e5      	b.n	8001096 <HAL_RCC_OscConfig+0x6e>
 80010ca:	682a      	ldr	r2, [r5, #0]
 80010cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010d0:	602a      	str	r2, [r5, #0]
 80010d2:	682a      	ldr	r2, [r5, #0]
 80010d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010d8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1df      	bne.n	800109e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80010de:	f7ff fe2f 	bl	8000d40 <HAL_GetTick>
 80010e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	039f      	lsls	r7, r3, #14
 80010e8:	d5a9      	bpl.n	800103e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ea:	f7ff fe29 	bl	8000d40 <HAL_GetTick>
 80010ee:	1b80      	subs	r0, r0, r6
 80010f0:	2864      	cmp	r0, #100	; 0x64
 80010f2:	d9f7      	bls.n	80010e4 <HAL_RCC_OscConfig+0xbc>
 80010f4:	e7df      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f6:	4b81      	ldr	r3, [pc, #516]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	f012 0f0c 	tst.w	r2, #12
 80010fe:	d007      	beq.n	8001110 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	2a08      	cmp	r2, #8
 8001108:	d111      	bne.n	800112e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	025e      	lsls	r6, r3, #9
 800110e:	d40e      	bmi.n	800112e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	0795      	lsls	r5, r2, #30
 8001116:	d502      	bpl.n	800111e <HAL_RCC_OscConfig+0xf6>
 8001118:	68e2      	ldr	r2, [r4, #12]
 800111a:	2a01      	cmp	r2, #1
 800111c:	d188      	bne.n	8001030 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	6921      	ldr	r1, [r4, #16]
 8001122:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001126:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800112a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112c:	e78a      	b.n	8001044 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800112e:	68e2      	ldr	r2, [r4, #12]
 8001130:	4b73      	ldr	r3, [pc, #460]	; (8001300 <HAL_RCC_OscConfig+0x2d8>)
 8001132:	b1b2      	cbz	r2, 8001162 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001138:	f7ff fe02 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	4d6f      	ldr	r5, [pc, #444]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800113e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	0798      	lsls	r0, r3, #30
 8001144:	d507      	bpl.n	8001156 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	6922      	ldr	r2, [r4, #16]
 800114a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800114e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001152:	602b      	str	r3, [r5, #0]
 8001154:	e776      	b.n	8001044 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fdf3 	bl	8000d40 <HAL_GetTick>
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	2802      	cmp	r0, #2
 800115e:	d9ef      	bls.n	8001140 <HAL_RCC_OscConfig+0x118>
 8001160:	e7a9      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001162:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001164:	f7ff fdec 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001168:	4d64      	ldr	r5, [pc, #400]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800116a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	0799      	lsls	r1, r3, #30
 8001170:	f57f af68 	bpl.w	8001044 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fde4 	bl	8000d40 <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	2802      	cmp	r0, #2
 800117c:	d9f6      	bls.n	800116c <HAL_RCC_OscConfig+0x144>
 800117e:	e79a      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001180:	6962      	ldr	r2, [r4, #20]
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <HAL_RCC_OscConfig+0x2dc>)
 8001184:	b17a      	cbz	r2, 80011a6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800118a:	f7ff fdd9 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4d5b      	ldr	r5, [pc, #364]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001190:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001194:	079f      	lsls	r7, r3, #30
 8001196:	f53f af59 	bmi.w	800104c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff fdd1 	bl	8000d40 <HAL_GetTick>
 800119e:	1b80      	subs	r0, r0, r6
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9f6      	bls.n	8001192 <HAL_RCC_OscConfig+0x16a>
 80011a4:	e787      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80011a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011a8:	f7ff fdca 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4d53      	ldr	r5, [pc, #332]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80011ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011b2:	0798      	lsls	r0, r3, #30
 80011b4:	f57f af4a 	bpl.w	800104c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fdc2 	bl	8000d40 <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9f6      	bls.n	80011b0 <HAL_RCC_OscConfig+0x188>
 80011c2:	e778      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011cc:	d128      	bne.n	8001220 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	9201      	str	r2, [sp, #4]
 80011d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011e2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4d48      	ldr	r5, [pc, #288]	; (8001308 <HAL_RCC_OscConfig+0x2e0>)
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	05d9      	lsls	r1, r3, #23
 80011ea:	d51b      	bpl.n	8001224 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ec:	68a3      	ldr	r3, [r4, #8]
 80011ee:	4d43      	ldr	r5, [pc, #268]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d127      	bne.n	8001244 <HAL_RCC_OscConfig+0x21c>
 80011f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011fc:	f7ff fda0 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001200:	4d3e      	ldr	r5, [pc, #248]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001202:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001204:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800120a:	079b      	lsls	r3, r3, #30
 800120c:	d539      	bpl.n	8001282 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800120e:	2e00      	cmp	r6, #0
 8001210:	f43f af20 	beq.w	8001054 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001214:	4a39      	ldr	r2, [pc, #228]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 8001216:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	e719      	b.n	8001054 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001220:	2600      	movs	r6, #0
 8001222:	e7df      	b.n	80011e4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800122c:	f7ff fd88 	bl	8000d40 <HAL_GetTick>
 8001230:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	682b      	ldr	r3, [r5, #0]
 8001234:	05da      	lsls	r2, r3, #23
 8001236:	d4d9      	bmi.n	80011ec <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001238:	f7ff fd82 	bl	8000d40 <HAL_GetTick>
 800123c:	1bc0      	subs	r0, r0, r7
 800123e:	2802      	cmp	r0, #2
 8001240:	d9f7      	bls.n	8001232 <HAL_RCC_OscConfig+0x20a>
 8001242:	e738      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	2b05      	cmp	r3, #5
 8001246:	d104      	bne.n	8001252 <HAL_RCC_OscConfig+0x22a>
 8001248:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	672b      	str	r3, [r5, #112]	; 0x70
 8001250:	e7d0      	b.n	80011f4 <HAL_RCC_OscConfig+0x1cc>
 8001252:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	672a      	str	r2, [r5, #112]	; 0x70
 800125a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800125c:	f022 0204 	bic.w	r2, r2, #4
 8001260:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ca      	bne.n	80011fc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001266:	f7ff fd6b 	bl	8000d40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800126e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001272:	0798      	lsls	r0, r3, #30
 8001274:	d5cb      	bpl.n	800120e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fd63 	bl	8000d40 <HAL_GetTick>
 800127a:	1bc0      	subs	r0, r0, r7
 800127c:	4540      	cmp	r0, r8
 800127e:	d9f7      	bls.n	8001270 <HAL_RCC_OscConfig+0x248>
 8001280:	e719      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fd5d 	bl	8000d40 <HAL_GetTick>
 8001286:	1bc0      	subs	r0, r0, r7
 8001288:	4540      	cmp	r0, r8
 800128a:	d9bd      	bls.n	8001208 <HAL_RCC_OscConfig+0x1e0>
 800128c:	e713      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800128e:	4d1b      	ldr	r5, [pc, #108]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
 8001290:	68ab      	ldr	r3, [r5, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	f43f aeca 	beq.w	8001030 <HAL_RCC_OscConfig+0x8>
 800129c:	4e1b      	ldr	r6, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x2e4>)
 800129e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012a2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a4:	d134      	bne.n	8001310 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80012a6:	f7ff fd4b 	bl	8000d40 <HAL_GetTick>
 80012aa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ac:	682b      	ldr	r3, [r5, #0]
 80012ae:	0199      	lsls	r1, r3, #6
 80012b0:	d41e      	bmi.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b2:	6a22      	ldr	r2, [r4, #32]
 80012b4:	69e3      	ldr	r3, [r4, #28]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	4c0d      	ldr	r4, [pc, #52]	; (80012fc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c8:	0852      	lsrs	r2, r2, #1
 80012ca:	3a01      	subs	r2, #1
 80012cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012d2:	2301      	movs	r3, #1
 80012d4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012d6:	f7ff fd33 	bl	8000d40 <HAL_GetTick>
 80012da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	019a      	lsls	r2, r3, #6
 80012e0:	f53f aebc 	bmi.w	800105c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fd2c 	bl	8000d40 <HAL_GetTick>
 80012e8:	1b40      	subs	r0, r0, r5
 80012ea:	2802      	cmp	r0, #2
 80012ec:	d9f6      	bls.n	80012dc <HAL_RCC_OscConfig+0x2b4>
 80012ee:	e6e2      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fd26 	bl	8000d40 <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9d8      	bls.n	80012ac <HAL_RCC_OscConfig+0x284>
 80012fa:	e6dc      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
 80012fc:	40023800 	.word	0x40023800
 8001300:	42470000 	.word	0x42470000
 8001304:	42470e80 	.word	0x42470e80
 8001308:	40007000 	.word	0x40007000
 800130c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001310:	f7ff fd16 	bl	8000d40 <HAL_GetTick>
 8001314:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	f57f ae9f 	bpl.w	800105c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fd0f 	bl	8000d40 <HAL_GetTick>
 8001322:	1b00      	subs	r0, r0, r4
 8001324:	2802      	cmp	r0, #2
 8001326:	d9f6      	bls.n	8001316 <HAL_RCC_OscConfig+0x2ee>
 8001328:	e6c5      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
 800132a:	bf00      	nop

0800132c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800132e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001330:	688b      	ldr	r3, [r1, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d003      	beq.n	8001342 <HAL_RCC_GetSysClockFreq+0x16>
 800133a:	2b08      	cmp	r3, #8
 800133c:	d003      	beq.n	8001346 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001340:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <HAL_RCC_GetSysClockFreq+0x58>)
 8001344:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001346:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001348:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800134a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800134c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001350:	bf14      	ite	ne
 8001352:	480c      	ldrne	r0, [pc, #48]	; (8001384 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001354:	480a      	ldreq	r0, [pc, #40]	; (8001380 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001356:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800135a:	bf18      	it	ne
 800135c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001362:	fba1 0100 	umull	r0, r1, r1, r0
 8001366:	f7ff fb19 	bl	800099c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_RCC_GetSysClockFreq+0x50>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001372:	3301      	adds	r3, #1
 8001374:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001376:	fbb0 f0f3 	udiv	r0, r0, r3
 800137a:	bd08      	pop	{r3, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	00f42400 	.word	0x00f42400
 8001384:	007a1200 	.word	0x007a1200

08001388 <HAL_RCC_ClockConfig>:
{
 8001388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800138e:	4604      	mov	r4, r0
 8001390:	b910      	cbnz	r0, 8001398 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
 8001394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <HAL_RCC_ClockConfig+0x124>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	f002 020f 	and.w	r2, r2, #15
 80013a0:	428a      	cmp	r2, r1
 80013a2:	d328      	bcc.n	80013f6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a4:	6821      	ldr	r1, [r4, #0]
 80013a6:	078f      	lsls	r7, r1, #30
 80013a8:	d42d      	bmi.n	8001406 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	07c8      	lsls	r0, r1, #31
 80013ac:	d440      	bmi.n	8001430 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013ae:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_RCC_ClockConfig+0x124>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f002 020f 	and.w	r2, r2, #15
 80013b6:	4295      	cmp	r5, r2
 80013b8:	d366      	bcc.n	8001488 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	0751      	lsls	r1, r2, #29
 80013be:	d46c      	bmi.n	800149a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c0:	0713      	lsls	r3, r2, #28
 80013c2:	d507      	bpl.n	80013d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c4:	4a3a      	ldr	r2, [pc, #232]	; (80014b0 <HAL_RCC_ClockConfig+0x128>)
 80013c6:	6921      	ldr	r1, [r4, #16]
 80013c8:	6893      	ldr	r3, [r2, #8]
 80013ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d4:	f7ff ffaa 	bl	800132c <HAL_RCC_GetSysClockFreq>
 80013d8:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <HAL_RCC_ClockConfig+0x128>)
 80013da:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <HAL_RCC_ClockConfig+0x12c>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	40d8      	lsrs	r0, r3
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_ClockConfig+0x130>)
 80013e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fc5e 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 80013f0:	2000      	movs	r0, #0
 80013f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	b2ca      	uxtb	r2, r1
 80013f8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	4299      	cmp	r1, r3
 8001402:	d1c6      	bne.n	8001392 <HAL_RCC_ClockConfig+0xa>
 8001404:	e7ce      	b.n	80013a4 <HAL_RCC_ClockConfig+0x1c>
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800140c:	bf1e      	ittt	ne
 800140e:	689a      	ldrne	r2, [r3, #8]
 8001410:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001414:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001416:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001418:	bf42      	ittt	mi
 800141a:	689a      	ldrmi	r2, [r3, #8]
 800141c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001420:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	68a0      	ldr	r0, [r4, #8]
 8001426:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800142a:	4302      	orrs	r2, r0
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	e7bc      	b.n	80013aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001430:	6862      	ldr	r2, [r4, #4]
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <HAL_RCC_ClockConfig+0x128>)
 8001434:	2a01      	cmp	r2, #1
 8001436:	d11d      	bne.n	8001474 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	d0a8      	beq.n	8001392 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001440:	4e1b      	ldr	r6, [pc, #108]	; (80014b0 <HAL_RCC_ClockConfig+0x128>)
 8001442:	68b3      	ldr	r3, [r6, #8]
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	4313      	orrs	r3, r2
 800144a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800144c:	f7ff fc78 	bl	8000d40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001450:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001454:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	68b3      	ldr	r3, [r6, #8]
 8001458:	6862      	ldr	r2, [r4, #4]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001462:	d0a4      	beq.n	80013ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001464:	f7ff fc6c 	bl	8000d40 <HAL_GetTick>
 8001468:	1bc0      	subs	r0, r0, r7
 800146a:	4540      	cmp	r0, r8
 800146c:	d9f3      	bls.n	8001456 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800146e:	2003      	movs	r0, #3
}
 8001470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001474:	1e91      	subs	r1, r2, #2
 8001476:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001478:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147a:	d802      	bhi.n	8001482 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001480:	e7dd      	b.n	800143e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	f013 0f02 	tst.w	r3, #2
 8001486:	e7da      	b.n	800143e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001488:	b2ea      	uxtb	r2, r5
 800148a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	429d      	cmp	r5, r3
 8001494:	f47f af7d 	bne.w	8001392 <HAL_RCC_ClockConfig+0xa>
 8001498:	e78f      	b.n	80013ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800149a:	4905      	ldr	r1, [pc, #20]	; (80014b0 <HAL_RCC_ClockConfig+0x128>)
 800149c:	68e0      	ldr	r0, [r4, #12]
 800149e:	688b      	ldr	r3, [r1, #8]
 80014a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014a4:	4303      	orrs	r3, r0
 80014a6:	608b      	str	r3, [r1, #8]
 80014a8:	e78a      	b.n	80013c0 <HAL_RCC_ClockConfig+0x38>
 80014aa:	bf00      	nop
 80014ac:	40023c00 	.word	0x40023c00
 80014b0:	40023800 	.word	0x40023800
 80014b4:	08002b60 	.word	0x08002b60
 80014b8:	20002684 	.word	0x20002684

080014bc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20002684 	.word	0x20002684

080014c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80014c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014cc:	9e06      	ldr	r6, [sp, #24]
 80014ce:	4604      	mov	r4, r0
 80014d0:	4688      	mov	r8, r1
 80014d2:	4617      	mov	r7, r2
 80014d4:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	ea38 0303 	bics.w	r3, r8, r3
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	429f      	cmp	r7, r3
 80014e6:	d102      	bne.n	80014ee <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80014e8:	2000      	movs	r0, #0
}
 80014ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80014ee:	1c6b      	adds	r3, r5, #1
 80014f0:	d0f2      	beq.n	80014d8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80014f2:	bb55      	cbnz	r5, 800154a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80014fc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80014fe:	6862      	ldr	r2, [r4, #4]
 8001500:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001504:	d10a      	bne.n	800151c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001506:	68a2      	ldr	r2, [r4, #8]
 8001508:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800150c:	d002      	beq.n	8001514 <SPI_WaitFlagStateUntilTimeout+0x4c>
 800150e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001512:	d103      	bne.n	800151c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800151a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800151c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800151e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001522:	d109      	bne.n	8001538 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800152a:	0412      	lsls	r2, r2, #16
 800152c:	0c12      	lsrs	r2, r2, #16
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001536:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001538:	2301      	movs	r3, #1
 800153a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800153e:	2300      	movs	r3, #0
 8001540:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001544:	2003      	movs	r0, #3
 8001546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800154a:	f7ff fbf9 	bl	8000d40 <HAL_GetTick>
 800154e:	1b80      	subs	r0, r0, r6
 8001550:	4285      	cmp	r5, r0
 8001552:	d8c0      	bhi.n	80014d6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001554:	e7ce      	b.n	80014f4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001556 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001556:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001558:	460b      	mov	r3, r1
 800155a:	9200      	str	r2, [sp, #0]
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	2200      	movs	r2, #0
{
 8001560:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001562:	f7ff ffb1 	bl	80014c8 <SPI_WaitFlagStateUntilTimeout>
 8001566:	b120      	cbz	r0, 8001572 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001570:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001572:	b002      	add	sp, #8
 8001574:	bd10      	pop	{r4, pc}

08001576 <HAL_SPI_Init>:
{
 8001576:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001578:	4604      	mov	r4, r0
 800157a:	2800      	cmp	r0, #0
 800157c:	d036      	beq.n	80015ec <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001582:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001586:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800158a:	b91b      	cbnz	r3, 8001594 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800158c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001590:	f001 f8be 	bl	8002710 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001594:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001596:	68a0      	ldr	r0, [r4, #8]
 8001598:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800159a:	2302      	movs	r3, #2
 800159c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80015a0:	680b      	ldr	r3, [r1, #0]
 80015a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015a6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80015a8:	6863      	ldr	r3, [r4, #4]
 80015aa:	4303      	orrs	r3, r0
 80015ac:	68e0      	ldr	r0, [r4, #12]
 80015ae:	4303      	orrs	r3, r0
 80015b0:	6920      	ldr	r0, [r4, #16]
 80015b2:	4303      	orrs	r3, r0
 80015b4:	6960      	ldr	r0, [r4, #20]
 80015b6:	4303      	orrs	r3, r0
 80015b8:	69e0      	ldr	r0, [r4, #28]
 80015ba:	4303      	orrs	r3, r0
 80015bc:	6a20      	ldr	r0, [r4, #32]
 80015be:	4303      	orrs	r3, r0
 80015c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80015c2:	4303      	orrs	r3, r0
 80015c4:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80015c8:	4303      	orrs	r3, r0
 80015ca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80015cc:	0c12      	lsrs	r2, r2, #16
 80015ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015d0:	f002 0204 	and.w	r2, r2, #4
 80015d4:	431a      	orrs	r2, r3
 80015d6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015d8:	69cb      	ldr	r3, [r1, #28]
 80015da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015de:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015e0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80015e2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015e4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80015ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015ec:	2001      	movs	r0, #1
}
 80015ee:	bd10      	pop	{r4, pc}

080015f0 <HAL_SPI_Transmit>:
{
 80015f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80015f4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80015f6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80015fa:	2b01      	cmp	r3, #1
{
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001602:	f000 809c 	beq.w	800173e <HAL_SPI_Transmit+0x14e>
 8001606:	2301      	movs	r3, #1
 8001608:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800160c:	f7ff fb98 	bl	8000d40 <HAL_GetTick>
 8001610:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001612:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001616:	b2c0      	uxtb	r0, r0
 8001618:	2801      	cmp	r0, #1
 800161a:	f040 808e 	bne.w	800173a <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 800161e:	2d00      	cmp	r5, #0
 8001620:	d04e      	beq.n	80016c0 <HAL_SPI_Transmit+0xd0>
 8001622:	f1b8 0f00 	cmp.w	r8, #0
 8001626:	d04b      	beq.n	80016c0 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001628:	2303      	movs	r3, #3
 800162a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800162e:	2300      	movs	r3, #0
 8001630:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001632:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001634:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001638:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800163a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800163c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800163e:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001640:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001642:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001648:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800164a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800164e:	bf02      	ittt	eq
 8001650:	681a      	ldreq	r2, [r3, #0]
 8001652:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001656:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800165c:	bf5e      	ittt	pl
 800165e:	681a      	ldrpl	r2, [r3, #0]
 8001660:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001664:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001666:	68e2      	ldr	r2, [r4, #12]
 8001668:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800166c:	6862      	ldr	r2, [r4, #4]
 800166e:	d138      	bne.n	80016e2 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001670:	b11a      	cbz	r2, 800167a <HAL_SPI_Transmit+0x8a>
 8001672:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001674:	b292      	uxth	r2, r2
 8001676:	2a01      	cmp	r2, #1
 8001678:	d106      	bne.n	8001688 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 800167a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800167e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001680:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001682:	3b01      	subs	r3, #1
 8001684:	b29b      	uxth	r3, r3
 8001686:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001688:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800168a:	b29b      	uxth	r3, r3
 800168c:	b993      	cbnz	r3, 80016b4 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800168e:	9700      	str	r7, [sp, #0]
 8001690:	4633      	mov	r3, r6
 8001692:	2201      	movs	r2, #1
 8001694:	2102      	movs	r1, #2
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff ff16 	bl	80014c8 <SPI_WaitFlagStateUntilTimeout>
 800169c:	b978      	cbnz	r0, 80016be <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800169e:	463a      	mov	r2, r7
 80016a0:	4631      	mov	r1, r6
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff ff57 	bl	8001556 <SPI_CheckFlag_BSY>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d038      	beq.n	800171e <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016ac:	2320      	movs	r3, #32
 80016ae:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
    goto error;
 80016b2:	e005      	b.n	80016c0 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	0790      	lsls	r0, r2, #30
 80016ba:	d4de      	bmi.n	800167a <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80016bc:	b94e      	cbnz	r6, 80016d2 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80016c6:	2300      	movs	r3, #0
 80016c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80016cc:	b004      	add	sp, #16
 80016ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80016d2:	1c71      	adds	r1, r6, #1
 80016d4:	d0d8      	beq.n	8001688 <HAL_SPI_Transmit+0x98>
 80016d6:	f7ff fb33 	bl	8000d40 <HAL_GetTick>
 80016da:	1bc0      	subs	r0, r0, r7
 80016dc:	4286      	cmp	r6, r0
 80016de:	d8d3      	bhi.n	8001688 <HAL_SPI_Transmit+0x98>
 80016e0:	e7ed      	b.n	80016be <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80016e2:	b11a      	cbz	r2, 80016ec <HAL_SPI_Transmit+0xfc>
 80016e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80016e6:	b292      	uxth	r2, r2
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d106      	bne.n	80016fa <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80016ec:	f815 2b01 	ldrb.w	r2, [r5], #1
 80016f0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80016f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80016fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0c5      	beq.n	800168e <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	0792      	lsls	r2, r2, #30
 8001708:	d4f0      	bmi.n	80016ec <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800170a:	2e00      	cmp	r6, #0
 800170c:	d0d7      	beq.n	80016be <HAL_SPI_Transmit+0xce>
 800170e:	1c73      	adds	r3, r6, #1
 8001710:	d0f3      	beq.n	80016fa <HAL_SPI_Transmit+0x10a>
 8001712:	f7ff fb15 	bl	8000d40 <HAL_GetTick>
 8001716:	1bc0      	subs	r0, r0, r7
 8001718:	4286      	cmp	r6, r0
 800171a:	d8ee      	bhi.n	80016fa <HAL_SPI_Transmit+0x10a>
 800171c:	e7cf      	b.n	80016be <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	b933      	cbnz	r3, 8001730 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	9203      	str	r2, [sp, #12]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001730:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001732:	3000      	adds	r0, #0
 8001734:	bf18      	it	ne
 8001736:	2001      	movne	r0, #1
 8001738:	e7c2      	b.n	80016c0 <HAL_SPI_Transmit+0xd0>
 800173a:	2002      	movs	r0, #2
 800173c:	e7c0      	b.n	80016c0 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 800173e:	2002      	movs	r0, #2
 8001740:	e7c4      	b.n	80016cc <HAL_SPI_Transmit+0xdc>

08001742 <HAL_SPI_TransmitReceive>:
{
 8001742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001746:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001748:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800174c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800174e:	2b01      	cmp	r3, #1
{
 8001750:	4604      	mov	r4, r0
 8001752:	460d      	mov	r5, r1
 8001754:	4616      	mov	r6, r2
 8001756:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001758:	f000 80ed 	beq.w	8001936 <HAL_SPI_TransmitReceive+0x1f4>
 800175c:	2301      	movs	r3, #1
 800175e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001762:	f7ff faed 	bl	8000d40 <HAL_GetTick>
  tmp  = hspi->State;
 8001766:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 800176a:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800176c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800176e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001770:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001772:	d00a      	beq.n	800178a <HAL_SPI_TransmitReceive+0x48>
 8001774:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001778:	f040 80db 	bne.w	8001932 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800177c:	68a2      	ldr	r2, [r4, #8]
 800177e:	2a00      	cmp	r2, #0
 8001780:	f040 80d7 	bne.w	8001932 <HAL_SPI_TransmitReceive+0x1f0>
 8001784:	2b04      	cmp	r3, #4
 8001786:	f040 80d4 	bne.w	8001932 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800178a:	2d00      	cmp	r5, #0
 800178c:	d04e      	beq.n	800182c <HAL_SPI_TransmitReceive+0xea>
 800178e:	2e00      	cmp	r6, #0
 8001790:	d04c      	beq.n	800182c <HAL_SPI_TransmitReceive+0xea>
 8001792:	f1b9 0f00 	cmp.w	r9, #0
 8001796:	d049      	beq.n	800182c <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001798:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800179c:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 800179e:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017a0:	bf04      	itt	eq
 80017a2:	2305      	moveq	r3, #5
 80017a4:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80017ac:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80017ae:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80017b0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80017b2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80017b6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80017ba:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80017bc:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80017c0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80017c2:	bf58      	it	pl
 80017c4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017c6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80017c8:	bf58      	it	pl
 80017ca:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80017ce:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80017d2:	bf58      	it	pl
 80017d4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017d6:	68e2      	ldr	r2, [r4, #12]
 80017d8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80017dc:	d15d      	bne.n	800189a <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80017de:	b119      	cbz	r1, 80017e8 <HAL_SPI_TransmitReceive+0xa6>
 80017e0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80017e2:	b292      	uxth	r2, r2
 80017e4:	2a01      	cmp	r2, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80017e8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80017ec:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80017ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80017f6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80017fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b9bb      	cbnz	r3, 8001830 <HAL_SPI_TransmitReceive+0xee>
 8001800:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001802:	b29b      	uxth	r3, r3
 8001804:	b9a3      	cbnz	r3, 8001830 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001806:	f8cd 8000 	str.w	r8, [sp]
 800180a:	463b      	mov	r3, r7
 800180c:	2201      	movs	r2, #1
 800180e:	2102      	movs	r1, #2
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fe59 	bl	80014c8 <SPI_WaitFlagStateUntilTimeout>
 8001816:	2800      	cmp	r0, #0
 8001818:	d135      	bne.n	8001886 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800181a:	4642      	mov	r2, r8
 800181c:	4639      	mov	r1, r7
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff fe99 	bl	8001556 <SPI_CheckFlag_BSY>
 8001824:	2800      	cmp	r0, #0
 8001826:	d079      	beq.n	800191c <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001828:	2320      	movs	r3, #32
 800182a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800182c:	2001      	movs	r0, #1
 800182e:	e02b      	b.n	8001888 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001830:	f1b9 0f00 	cmp.w	r9, #0
 8001834:	d00f      	beq.n	8001856 <HAL_SPI_TransmitReceive+0x114>
 8001836:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001838:	b29b      	uxth	r3, r3
 800183a:	b163      	cbz	r3, 8001856 <HAL_SPI_TransmitReceive+0x114>
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	0791      	lsls	r1, r2, #30
 8001842:	d508      	bpl.n	8001856 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001844:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001848:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800184a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800184c:	3b01      	subs	r3, #1
 800184e:	b29b      	uxth	r3, r3
 8001850:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001852:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001856:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001858:	b29b      	uxth	r3, r3
 800185a:	b163      	cbz	r3, 8001876 <HAL_SPI_TransmitReceive+0x134>
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	07d2      	lsls	r2, r2, #31
 8001862:	d508      	bpl.n	8001876 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800186a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001872:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001876:	1c78      	adds	r0, r7, #1
 8001878:	d0bf      	beq.n	80017fa <HAL_SPI_TransmitReceive+0xb8>
 800187a:	f7ff fa61 	bl	8000d40 <HAL_GetTick>
 800187e:	eba0 0008 	sub.w	r0, r0, r8
 8001882:	4287      	cmp	r7, r0
 8001884:	d8b9      	bhi.n	80017fa <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001888:	2301      	movs	r3, #1
 800188a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800188e:	2300      	movs	r3, #0
 8001890:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001894:	b005      	add	sp, #20
 8001896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800189a:	b119      	cbz	r1, 80018a4 <HAL_SPI_TransmitReceive+0x162>
 800189c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800189e:	b292      	uxth	r2, r2
 80018a0:	2a01      	cmp	r2, #1
 80018a2:	d106      	bne.n	80018b2 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80018a4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80018a8:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80018aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80018b2:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b91b      	cbnz	r3, 80018c4 <HAL_SPI_TransmitReceive+0x182>
 80018bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0a0      	beq.n	8001806 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80018c4:	f1b9 0f00 	cmp.w	r9, #0
 80018c8:	d00f      	beq.n	80018ea <HAL_SPI_TransmitReceive+0x1a8>
 80018ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b163      	cbz	r3, 80018ea <HAL_SPI_TransmitReceive+0x1a8>
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	0791      	lsls	r1, r2, #30
 80018d6:	d508      	bpl.n	80018ea <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80018d8:	782a      	ldrb	r2, [r5, #0]
 80018da:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80018dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80018e4:	3501      	adds	r5, #1
        txallowed = 0U;
 80018e6:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80018ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b163      	cbz	r3, 800190a <HAL_SPI_TransmitReceive+0x1c8>
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	07d2      	lsls	r2, r2, #31
 80018f6:	d508      	bpl.n	800190a <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80018fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001904:	3601      	adds	r6, #1
        txallowed = 1U;
 8001906:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800190a:	1c7b      	adds	r3, r7, #1
 800190c:	d0d3      	beq.n	80018b6 <HAL_SPI_TransmitReceive+0x174>
 800190e:	f7ff fa17 	bl	8000d40 <HAL_GetTick>
 8001912:	eba0 0008 	sub.w	r0, r0, r8
 8001916:	4287      	cmp	r7, r0
 8001918:	d8cd      	bhi.n	80018b6 <HAL_SPI_TransmitReceive+0x174>
 800191a:	e7b4      	b.n	8001886 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800191c:	68a3      	ldr	r3, [r4, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1b2      	bne.n	8001888 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	9003      	str	r0, [sp, #12]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	9203      	str	r2, [sp, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	9303      	str	r3, [sp, #12]
 800192e:	9b03      	ldr	r3, [sp, #12]
 8001930:	e7aa      	b.n	8001888 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001932:	2002      	movs	r0, #2
 8001934:	e7a8      	b.n	8001888 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001936:	2002      	movs	r0, #2
 8001938:	e7ac      	b.n	8001894 <HAL_SPI_TransmitReceive+0x152>
	...

0800193c <Init_Heigh_Pill>:
		}
  	  }

}

void Init_Heigh_Pill(){
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <Init_Heigh_Pill+0x14>)
 800193e:	2396      	movs	r3, #150	; 0x96
	int i =0;
	int value = 0;
	for(i=0; i<15; i++){
		list_heigh[i] = 150-value;
 8001940:	f822 3f02 	strh.w	r3, [r2, #2]!
 8001944:	3b0a      	subs	r3, #10
 8001946:	b29b      	uxth	r3, r3
	for(i=0; i<15; i++){
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <Init_Heigh_Pill+0x4>
		value += 10;
	}

}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20002782 	.word	0x20002782

08001954 <Welcome>:

void Welcome(){
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
	SSD1289_Write_Back_Ground(Black);
 8001956:	2000      	movs	r0, #0
void Welcome(){
 8001958:	b085      	sub	sp, #20
	SSD1289_Write_Back_Ground(Black);
 800195a:	f000 fd18 	bl	800238e <SSD1289_Write_Back_Ground>
	SSD1289_Print_String(50, 40, 2, 1, 4, White, Black, "Flapy Bird");
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <Welcome+0x70>)
 8001960:	9303      	str	r3, [sp, #12]
 8001962:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001966:	2600      	movs	r6, #0
 8001968:	2304      	movs	r3, #4
 800196a:	e88d 0068 	stmia.w	sp, {r3, r5, r6}
 800196e:	2202      	movs	r2, #2
 8001970:	2301      	movs	r3, #1
 8001972:	2128      	movs	r1, #40	; 0x28
 8001974:	2032      	movs	r0, #50	; 0x32
 8001976:	f000 fcbb 	bl	80022f0 <SSD1289_Print_String>
	SSD1289_Print_String(30, 80, 1, 1, 2, White, Black, "Embedded computer version");
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <Welcome+0x74>)
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	2702      	movs	r7, #2
 8001980:	2301      	movs	r3, #1
 8001982:	461a      	mov	r2, r3
 8001984:	9602      	str	r6, [sp, #8]
 8001986:	9501      	str	r5, [sp, #4]
 8001988:	9700      	str	r7, [sp, #0]
 800198a:	2150      	movs	r1, #80	; 0x50
 800198c:	201e      	movs	r0, #30
 800198e:	f000 fcaf 	bl	80022f0 <SSD1289_Print_String>
	SSD1289_Print_String(100, 150, 1, 1, 1, White, Black, "Code by Dinh Dac Cuong");
 8001992:	2401      	movs	r4, #1
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <Welcome+0x78>)
 8001996:	9303      	str	r3, [sp, #12]
 8001998:	4622      	mov	r2, r4
 800199a:	4623      	mov	r3, r4
 800199c:	9602      	str	r6, [sp, #8]
 800199e:	9501      	str	r5, [sp, #4]
 80019a0:	9400      	str	r4, [sp, #0]
 80019a2:	2196      	movs	r1, #150	; 0x96
 80019a4:	2064      	movs	r0, #100	; 0x64
 80019a6:	f000 fca3 	bl	80022f0 <SSD1289_Print_String>
	SSD1289_Print_String(40, 185, 1, 1, 2, White, Black, "Click to enter the game!");
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <Welcome+0x7c>)
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	9602      	str	r6, [sp, #8]
 80019b0:	9501      	str	r5, [sp, #4]
 80019b2:	9700      	str	r7, [sp, #0]
 80019b4:	4623      	mov	r3, r4
 80019b6:	4622      	mov	r2, r4
 80019b8:	21b9      	movs	r1, #185	; 0xb9
 80019ba:	2028      	movs	r0, #40	; 0x28
 80019bc:	f000 fc98 	bl	80022f0 <SSD1289_Print_String>
}
 80019c0:	b005      	add	sp, #20
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c4:	08002b0b 	.word	0x08002b0b
 80019c8:	08002b16 	.word	0x08002b16
 80019cc:	08002b30 	.word	0x08002b30
 80019d0:	08002b47 	.word	0x08002b47

080019d4 <Draw_Pillar>:
void Draw_Pillar(int16_t x, uint16_t heigh){
	if(x < 321){
 80019d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
void Draw_Pillar(int16_t x, uint16_t heigh){
 80019d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019dc:	460f      	mov	r7, r1
	if(x < 321){
 80019de:	dc24      	bgt.n	8001a2a <Draw_Pillar+0x56>
	/*Xoa ong khoi cu*/
		int16_t x1 = x+WIDTH_PILL+1;
 80019e0:	b284      	uxth	r4, r0
 80019e2:	f104 0629 	add.w	r6, r4, #41	; 0x29
 80019e6:	b2b6      	uxth	r6, r6

		SSD1289_Draw_V_Line(x1, 1, heigh, Background);				/*Xoa ong khoi top*/
		SSD1289_Draw_V_Line(x1, 1+heigh+DISTANCE, HEIGH_SCREEN, Background);   /*Xoa ong khoi bot*/
 80019e8:	f107 053d 	add.w	r5, r7, #61	; 0x3d
		SSD1289_Draw_V_Line(x1, 1, heigh, Background);				/*Xoa ong khoi top*/
 80019ec:	460a      	mov	r2, r1
 80019ee:	4630      	mov	r0, r6
		SSD1289_Draw_V_Line(x1, 1+heigh+DISTANCE, HEIGH_SCREEN, Background);   /*Xoa ong khoi bot*/
 80019f0:	b2ad      	uxth	r5, r5
		SSD1289_Draw_V_Line(x1, 1, heigh, Background);				/*Xoa ong khoi top*/
 80019f2:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 80019f6:	2101      	movs	r1, #1
 80019f8:	f000 fcb5 	bl	8002366 <SSD1289_Draw_V_Line>
		SSD1289_Draw_V_Line(x1, 1+heigh+DISTANCE, HEIGH_SCREEN, Background);   /*Xoa ong khoi bot*/
 80019fc:	4629      	mov	r1, r5
 80019fe:	4630      	mov	r0, r6
 8001a00:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 8001a04:	22d7      	movs	r2, #215	; 0xd7
 8001a06:	f000 fcae 	bl	8002366 <SSD1289_Draw_V_Line>

	/*Ve ong khoi moi*/
		SSD1289_Draw_V_Line(x, 1, heigh, Green);
 8001a0a:	463a      	mov	r2, r7
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a12:	2101      	movs	r1, #1
 8001a14:	f000 fca7 	bl	8002366 <SSD1289_Draw_V_Line>
		SSD1289_Draw_V_Line(x, 1+heigh+DISTANCE, HEIGH_SCREEN, Green);
 8001a18:	4629      	mov	r1, r5
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a20:	22d7      	movs	r2, #215	; 0xd7
	}
}
 8001a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		SSD1289_Draw_V_Line(x, 1+heigh+DISTANCE, HEIGH_SCREEN, Green);
 8001a26:	f000 bc9e 	b.w	8002366 <SSD1289_Draw_V_Line>
 8001a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001a30 <Bird_Fly>:


void Bird_Fly(uint16_t y){
 8001a30:	b513      	push	{r0, r1, r4, lr}
	SSD1289_Fill_Color(BIRD_X, y-3, (BIRD_X+WIDTH_BIRD+5), (y+HEIGH_BIRD+5), Background);
 8001a32:	f100 0318 	add.w	r3, r0, #24
 8001a36:	1ec1      	subs	r1, r0, #3
 8001a38:	f24c 72ff 	movw	r2, #51199	; 0xc7ff
void Bird_Fly(uint16_t y){
 8001a3c:	4604      	mov	r4, r0
	SSD1289_Fill_Color(BIRD_X, y-3, (BIRD_X+WIDTH_BIRD+5), (y+HEIGH_BIRD+5), Background);
 8001a3e:	9200      	str	r2, [sp, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	228d      	movs	r2, #141	; 0x8d
 8001a44:	b289      	uxth	r1, r1
 8001a46:	206e      	movs	r0, #110	; 0x6e
 8001a48:	f000 fbd0 	bl	80021ec <SSD1289_Fill_Color>
	HAL_Delay(5);
 8001a4c:	2005      	movs	r0, #5
 8001a4e:	f7ff f97d 	bl	8000d4c <HAL_Delay>
	SSD1289_Write_Pic_Coor(BIRD_X, y, WIDTH_BIRD, HEIGH_BIRD, bird_image);
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <Bird_Fly+0x38>)
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	221a      	movs	r2, #26
 8001a58:	2313      	movs	r3, #19
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	206e      	movs	r0, #110	; 0x6e
 8001a5e:	f000 fbd9 	bl	8002214 <SSD1289_Write_Pic_Coor>
}
 8001a62:	b002      	add	sp, #8
 8001a64:	bd10      	pop	{r4, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <Print_Score>:

void Print_Score(uint16_t val, uint16_t x_score, uint16_t color){
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b087      	sub	sp, #28
	uint16_t a = 0, b = 0;
	char string[3] = {0, 0, '\0'};
 8001a70:	2300      	movs	r3, #0
void Print_Score(uint16_t val, uint16_t x_score, uint16_t color){
 8001a72:	460d      	mov	r5, r1
 8001a74:	4617      	mov	r7, r2
	/*Xoa diem cu*/
	SSD1289_Fill_Color(x_score, Y_SCORE, x_score+20, 239, Yellow);
 8001a76:	f64f 76e0 	movw	r6, #65504	; 0xffe0
 8001a7a:	f101 0214 	add.w	r2, r1, #20
void Print_Score(uint16_t val, uint16_t x_score, uint16_t color){
 8001a7e:	4604      	mov	r4, r0
	char string[3] = {0, 0, '\0'};
 8001a80:	f88d 3014 	strb.w	r3, [sp, #20]
 8001a84:	f88d 3015 	strb.w	r3, [sp, #21]
 8001a88:	f88d 3016 	strb.w	r3, [sp, #22]
	SSD1289_Fill_Color(x_score, Y_SCORE, x_score+20, 239, Yellow);
 8001a8c:	9600      	str	r6, [sp, #0]
 8001a8e:	23ef      	movs	r3, #239	; 0xef
 8001a90:	b292      	uxth	r2, r2
 8001a92:	21df      	movs	r1, #223	; 0xdf
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 fba9 	bl	80021ec <SSD1289_Fill_Color>
	if(val < 10){
 8001a9a:	2c09      	cmp	r4, #9
 8001a9c:	d80b      	bhi.n	8001ab6 <Print_Score+0x4a>
		SSD1289_Print_Char(x_score, Y_SCORE, 2, color, Yellow, (val+48));
 8001a9e:	3430      	adds	r4, #48	; 0x30
 8001aa0:	b2e4      	uxtb	r4, r4
 8001aa2:	9401      	str	r4, [sp, #4]
 8001aa4:	9600      	str	r6, [sp, #0]
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	21df      	movs	r1, #223	; 0xdf
 8001aac:	4628      	mov	r0, r5
 8001aae:	f000 fbd3 	bl	8002258 <SSD1289_Print_Char>
		string[0] = b;
		string[1] = a;
		SSD1289_Print_String(x_score, Y_SCORE, 1, 1, 2, color, Yellow, string);
	}

}
 8001ab2:	b007      	add	sp, #28
 8001ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		b = val/10	+ 48;	/*Hang chuc*/
 8001ab6:	220a      	movs	r2, #10
 8001ab8:	fbb4 f3f2 	udiv	r3, r4, r2
 8001abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
		a = val%10 + 48;	/*Hang don vi*/
 8001ac0:	fb02 4413 	mls	r4, r2, r3, r4
		SSD1289_Print_String(x_score, Y_SCORE, 1, 1, 2, color, Yellow, string);
 8001ac4:	ab05      	add	r3, sp, #20
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
		string[0] = b;
 8001ace:	f88d 1014 	strb.w	r1, [sp, #20]
		a = val%10 + 48;	/*Hang don vi*/
 8001ad2:	3430      	adds	r4, #48	; 0x30
		SSD1289_Print_String(x_score, Y_SCORE, 1, 1, 2, color, Yellow, string);
 8001ad4:	9602      	str	r6, [sp, #8]
 8001ad6:	9701      	str	r7, [sp, #4]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	21df      	movs	r1, #223	; 0xdf
 8001adc:	4628      	mov	r0, r5
		string[1] = a;
 8001ade:	f88d 4015 	strb.w	r4, [sp, #21]
		SSD1289_Print_String(x_score, Y_SCORE, 1, 1, 2, color, Yellow, string);
 8001ae2:	f000 fc05 	bl	80022f0 <SSD1289_Print_String>
}
 8001ae6:	e7e4      	b.n	8001ab2 <Print_Score+0x46>

08001ae8 <Game_Over>:

void Game_Over(){
 8001ae8:	b570      	push	{r4, r5, r6, lr}
 8001aea:	b086      	sub	sp, #24

	SSD1289_Fill_Color(X_GAME_OVER-40, Y_GAME_OVER-10, X_GAME_OVER+120, Y_GAME_OVER+70, Background);
 8001aec:	f24c 75ff 	movw	r5, #51199	; 0xc7ff
 8001af0:	236e      	movs	r3, #110	; 0x6e
 8001af2:	22d2      	movs	r2, #210	; 0xd2
 8001af4:	211e      	movs	r1, #30
 8001af6:	2032      	movs	r0, #50	; 0x32
 8001af8:	9500      	str	r5, [sp, #0]
 8001afa:	f000 fb77 	bl	80021ec <SSD1289_Fill_Color>
	SSD1289_Print_String(X_GAME_OVER, Y_GAME_OVER, 2, 2, 3, Red, Background, "Game Over");
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <Game_Over+0xc0>)
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	f44f 4678 	mov.w	r6, #63488	; 0xf800
 8001b06:	2303      	movs	r3, #3
 8001b08:	e88d 0048 	stmia.w	sp, {r3, r6}
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2128      	movs	r1, #40	; 0x28
 8001b12:	205a      	movs	r0, #90	; 0x5a
 8001b14:	9502      	str	r5, [sp, #8]
 8001b16:	f000 fbeb 	bl	80022f0 <SSD1289_Print_String>
	SSD1289_Print_String(X_GAME_SCORE, Y_GAME_SCORE, 2, 2, 2, Red, Background, "Score: ");
 8001b1a:	2402      	movs	r4, #2
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <Game_Over+0xc4>)
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	9502      	str	r5, [sp, #8]
 8001b22:	4623      	mov	r3, r4
 8001b24:	9601      	str	r6, [sp, #4]
 8001b26:	9400      	str	r4, [sp, #0]
 8001b28:	4622      	mov	r2, r4
 8001b2a:	2146      	movs	r1, #70	; 0x46
 8001b2c:	205f      	movs	r0, #95	; 0x5f
 8001b2e:	f000 fbdf 	bl	80022f0 <SSD1289_Print_String>
	uint16_t a = 0, b = 0;
	char string[3] = {0, 0, '\0'};
 8001b32:	2300      	movs	r3, #0
 8001b34:	f88d 3014 	strb.w	r3, [sp, #20]
 8001b38:	f88d 3015 	strb.w	r3, [sp, #21]
 8001b3c:	f88d 3016 	strb.w	r3, [sp, #22]
	if(score < 10){
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <Game_Over+0xc8>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d817      	bhi.n	8001b78 <Game_Over+0x90>
		SSD1289_Print_Char(X_SOCRE_END, Y_GAME_SCORE, 2, Red, Background, (score+48));
 8001b48:	3330      	adds	r3, #48	; 0x30
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9500      	str	r5, [sp, #0]
 8001b50:	4633      	mov	r3, r6
 8001b52:	4622      	mov	r2, r4
 8001b54:	2146      	movs	r1, #70	; 0x46
 8001b56:	20a5      	movs	r0, #165	; 0xa5
 8001b58:	f000 fb7e 	bl	8002258 <SSD1289_Print_Char>
		string[0] = b;
		string[1] = a;
		SSD1289_Print_String(X_SOCRE_END, Y_GAME_SCORE, 2, 2, 2, Red, Background, string);
	}

	HAL_Delay(1500);
 8001b5c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001b60:	f7ff f8f4 	bl	8000d4c <HAL_Delay>
	SSD1289_Write_Pic_Coor(X_BUT, Y_BUT, BUT_WIDTH, BUT_HEIGH, button);
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <Game_Over+0xcc>)
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2231      	movs	r2, #49	; 0x31
 8001b6a:	2330      	movs	r3, #48	; 0x30
 8001b6c:	2164      	movs	r1, #100	; 0x64
 8001b6e:	208c      	movs	r0, #140	; 0x8c
 8001b70:	f000 fb50 	bl	8002214 <SSD1289_Write_Pic_Coor>
}
 8001b74:	b006      	add	sp, #24
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
		b = score/10	+ 48;	/*Hang chuc*/
 8001b78:	210a      	movs	r1, #10
 8001b7a:	fbb3 f2f1 	udiv	r2, r3, r1
		a = score%10 + 48;	/*Hang don vi*/
 8001b7e:	fb01 3312 	mls	r3, r1, r2, r3
 8001b82:	3330      	adds	r3, #48	; 0x30
		b = score/10	+ 48;	/*Hang chuc*/
 8001b84:	f102 0030 	add.w	r0, r2, #48	; 0x30
		string[1] = a;
 8001b88:	f88d 3015 	strb.w	r3, [sp, #21]
		SSD1289_Print_String(X_SOCRE_END, Y_GAME_SCORE, 2, 2, 2, Red, Background, string);
 8001b8c:	ab05      	add	r3, sp, #20
		string[0] = b;
 8001b8e:	f88d 0014 	strb.w	r0, [sp, #20]
		SSD1289_Print_String(X_SOCRE_END, Y_GAME_SCORE, 2, 2, 2, Red, Background, string);
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	9502      	str	r5, [sp, #8]
 8001b96:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	2146      	movs	r1, #70	; 0x46
 8001ba0:	20a5      	movs	r0, #165	; 0xa5
 8001ba2:	f000 fba5 	bl	80022f0 <SSD1289_Print_String>
 8001ba6:	e7d9      	b.n	8001b5c <Game_Over+0x74>
 8001ba8:	08002af4 	.word	0x08002af4
 8001bac:	08002b03 	.word	0x08002b03
 8001bb0:	20002710 	.word	0x20002710
 8001bb4:	200003e4 	.word	0x200003e4

08001bb8 <Button_Press>:

int Button_Press(uint16_t x, uint16_t y, uint16_t width, uint16_t heigh){
 8001bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4691      	mov	r9, r2
 8001bc2:	4698      	mov	r8, r3
	uint16_t lcd_x = 0, lcd_y = 0;
	if(!Read_IRQ()){
 8001bc4:	f000 fe00 	bl	80027c8 <Read_IRQ>
 8001bc8:	4607      	mov	r7, r0
 8001bca:	b9b0      	cbnz	r0, 8001bfa <Button_Press+0x42>
		lcd_x = XPT2046_Calibrate(XPT2046_Read(cmd_X), 1);
 8001bcc:	2090      	movs	r0, #144	; 0x90
 8001bce:	f000 fe01 	bl	80027d4 <XPT2046_Read>
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	f000 fe40 	bl	8002858 <XPT2046_Calibrate>
 8001bd8:	4606      	mov	r6, r0
		lcd_y = XPT2046_Calibrate(XPT2046_Read(cmd_Y), 0);
 8001bda:	20d0      	movs	r0, #208	; 0xd0
 8001bdc:	f000 fdfa 	bl	80027d4 <XPT2046_Read>
 8001be0:	4639      	mov	r1, r7
 8001be2:	f000 fe39 	bl	8002858 <XPT2046_Calibrate>

		if(((lcd_x>x)&&(lcd_x<(x+width)))&&((lcd_y>y)&&(lcd_y<(y+heigh))))
 8001be6:	42b5      	cmp	r5, r6
 8001be8:	d207      	bcs.n	8001bfa <Button_Press+0x42>
 8001bea:	444d      	add	r5, r9
 8001bec:	42ae      	cmp	r6, r5
 8001bee:	da04      	bge.n	8001bfa <Button_Press+0x42>
 8001bf0:	4284      	cmp	r4, r0
 8001bf2:	d202      	bcs.n	8001bfa <Button_Press+0x42>
 8001bf4:	4444      	add	r4, r8
 8001bf6:	42a0      	cmp	r0, r4
 8001bf8:	db02      	blt.n	8001c00 <Button_Press+0x48>
			return YES;
		else
			return NO;
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return YES;
 8001c00:	2001      	movs	r0, #1
	}
	return NO;
}
 8001c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001c08 <Init_Game>:

void Init_Game(){
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	b085      	sub	sp, #20
	  Init_Heigh_Pill();
 8001c0c:	f7ff fe96 	bl	800193c <Init_Heigh_Pill>
	  score = 0;
	  x1 = 320;
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <Init_Game+0xd8>)
	  score = 0;
 8001c12:	4e34      	ldr	r6, [pc, #208]	; (8001ce4 <Init_Game+0xdc>)
	  x1 = 320;
 8001c14:	f44f 74a0 	mov.w	r4, #320	; 0x140
 8001c18:	801c      	strh	r4, [r3, #0]
	  x2 = 600;	/*Toa do x cua 2 ong khoi xuat hien tren man hinh*/
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <Init_Game+0xe0>)
	  score = 0;
 8001c1c:	2500      	movs	r5, #0
	  x2 = 600;	/*Toa do x cua 2 ong khoi xuat hien tren man hinh*/
 8001c1e:	f44f 7216 	mov.w	r2, #600	; 0x258
	  score = 0;
 8001c22:	8035      	strh	r5, [r6, #0]
	  x2 = 600;	/*Toa do x cua 2 ong khoi xuat hien tren man hinh*/
 8001c24:	801a      	strh	r2, [r3, #0]
	  heigh_pill1 = list_heigh[rand()%15];	/*Chieu cao ong khoi khi bat day game*/
 8001c26:	f000 fe99 	bl	800295c <rand>
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	fb90 f3f3 	sdiv	r3, r0, r3
 8001c30:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001c34:	1ac3      	subs	r3, r0, r3
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <Init_Game+0xe4>)
 8001c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3c:	4a2c      	ldr	r2, [pc, #176]	; (8001cf0 <Init_Game+0xe8>)
 8001c3e:	8013      	strh	r3, [r2, #0]
	  heigh_pill2 = 100;
 8001c40:	4a2c      	ldr	r2, [pc, #176]	; (8001cf4 <Init_Game+0xec>)
 8001c42:	2764      	movs	r7, #100	; 0x64
 8001c44:	8017      	strh	r7, [r2, #0]
	  y_bird = BIRD_Y;
 8001c46:	4a2c      	ldr	r2, [pc, #176]	; (8001cf8 <Init_Game+0xf0>)
 8001c48:	8017      	strh	r7, [r2, #0]
	  x_com = 320;
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <Init_Game+0xf4>)
 8001c4c:	8014      	strh	r4, [r2, #0]
	  h_com = heigh_pill1;
 8001c4e:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <Init_Game+0xf8>)
	  SSD1289_Write_Back_Ground(Background);
 8001c50:	f24c 70ff 	movw	r0, #51199	; 0xc7ff
	  h_com = heigh_pill1;
 8001c54:	8013      	strh	r3, [r2, #0]
	  SSD1289_Write_Back_Ground(Background);
 8001c56:	f000 fb9a 	bl	800238e <SSD1289_Write_Back_Ground>
	  SSD1289_Write_Pic_Coor(BIRD_X, BIRD_Y, WIDTH_BIRD, HEIGH_BIRD, bird_image);
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <Init_Game+0xfc>)
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4639      	mov	r1, r7
 8001c60:	2313      	movs	r3, #19
 8001c62:	221a      	movs	r2, #26
 8001c64:	206e      	movs	r0, #110	; 0x6e
 8001c66:	f000 fad5 	bl	8002214 <SSD1289_Write_Pic_Coor>
	  SSD1289_Write_Pic_Coor(0, HEIGH_SCREEN, WIDTH_LINE, HEIGH_LINE, line);
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <Init_Game+0x100>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4622      	mov	r2, r4
 8001c70:	4628      	mov	r0, r5
	  SSD1289_Fill_Color(0, HEIGH_SCREEN+5, 319, 239, Yellow);
 8001c72:	f64f 74e0 	movw	r4, #65504	; 0xffe0
	  SSD1289_Write_Pic_Coor(0, HEIGH_SCREEN, WIDTH_LINE, HEIGH_LINE, line);
 8001c76:	2305      	movs	r3, #5
 8001c78:	21d7      	movs	r1, #215	; 0xd7
 8001c7a:	f000 facb 	bl	8002214 <SSD1289_Write_Pic_Coor>
	  SSD1289_Fill_Color(0, HEIGH_SCREEN+5, 319, 239, Yellow);
 8001c7e:	9400      	str	r4, [sp, #0]
 8001c80:	4628      	mov	r0, r5
 8001c82:	23ef      	movs	r3, #239	; 0xef
 8001c84:	f240 123f 	movw	r2, #319	; 0x13f
 8001c88:	21dc      	movs	r1, #220	; 0xdc
 8001c8a:	f000 faaf 	bl	80021ec <SSD1289_Fill_Color>
	  SSD1289_Print_String(10, HEIGH_SCREEN+8, 1, 1, 2, Blue, Yellow, "Score: ");
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <Init_Game+0x104>)
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	2502      	movs	r5, #2
 8001c94:	2301      	movs	r3, #1
 8001c96:	271f      	movs	r7, #31
 8001c98:	461a      	mov	r2, r3
 8001c9a:	9402      	str	r4, [sp, #8]
 8001c9c:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8001ca0:	21df      	movs	r1, #223	; 0xdf
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f000 fb24 	bl	80022f0 <SSD1289_Print_String>
	  Print_Score(score, X_SCORE, Blue);
 8001ca8:	463a      	mov	r2, r7
 8001caa:	8830      	ldrh	r0, [r6, #0]
 8001cac:	214b      	movs	r1, #75	; 0x4b
 8001cae:	f7ff fedd 	bl	8001a6c <Print_Score>
	  SSD1289_Print_String(X_H_SCORE, HEIGH_SCREEN+8, 1, 1, 2, Hscolor, Yellow, "High Score: ");
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <Init_Game+0x108>)
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	9402      	str	r4, [sp, #8]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f24f 041f 	movw	r4, #61471	; 0xf01f
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	9401      	str	r4, [sp, #4]
 8001cc2:	9500      	str	r5, [sp, #0]
 8001cc4:	21df      	movs	r1, #223	; 0xdf
 8001cc6:	20b4      	movs	r0, #180	; 0xb4
 8001cc8:	f000 fb12 	bl	80022f0 <SSD1289_Print_String>
	  Print_Score(high_score, 300, Hscolor);
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <Init_Game+0x10c>)
 8001cce:	8818      	ldrh	r0, [r3, #0]
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	f44f 7196 	mov.w	r1, #300	; 0x12c
}
 8001cd6:	b005      	add	sp, #20
 8001cd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	  Print_Score(high_score, 300, Hscolor);
 8001cdc:	f7ff bec6 	b.w	8001a6c <Print_Score>
 8001ce0:	20002712 	.word	0x20002712
 8001ce4:	20002710 	.word	0x20002710
 8001ce8:	20002714 	.word	0x20002714
 8001cec:	20002784 	.word	0x20002784
 8001cf0:	2000270a 	.word	0x2000270a
 8001cf4:	2000270c 	.word	0x2000270c
 8001cf8:	20002718 	.word	0x20002718
 8001cfc:	20002716 	.word	0x20002716
 8001d00:	20002708 	.word	0x20002708
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20001644 	.word	0x20001644
 8001d0c:	08002b03 	.word	0x08002b03
 8001d10:	08002afe 	.word	0x08002afe
 8001d14:	2000270e 	.word	0x2000270e

08001d18 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <SystemClock_Config+0xa8>)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	9101      	str	r1, [sp, #4]
 8001d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <SystemClock_Config+0xac>)
 8001d36:	9102      	str	r1, [sp, #8]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d52:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d58:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d5e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d62:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d64:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d66:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d68:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d6c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d6e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f7ff f95a 	bl	8001028 <HAL_RCC_OscConfig>
 8001d74:	b100      	cbz	r0, 8001d78 <SystemClock_Config+0x60>
 8001d76:	e7fe      	b.n	8001d76 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d82:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d84:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d8c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d90:	f7ff fafa 	bl	8001388 <HAL_RCC_ClockConfig>
 8001d94:	4604      	mov	r4, r0
 8001d96:	b100      	cbz	r0, 8001d9a <SystemClock_Config+0x82>
 8001d98:	e7fe      	b.n	8001d98 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d9a:	f7ff fb8f 	bl	80014bc <HAL_RCC_GetHCLKFreq>
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001da6:	f7ff f82b 	bl	8000e00 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001daa:	2004      	movs	r0, #4
 8001dac:	f7ff f83e 	bl	8000e2c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001db0:	4622      	mov	r2, r4
 8001db2:	4621      	mov	r1, r4
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7fe ffee 	bl	8000d98 <HAL_NVIC_SetPriority>
}
 8001dbc:	b014      	add	sp, #80	; 0x50
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <main>:
{
 8001dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dcc:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dce:	2400      	movs	r4, #0
  HAL_Init();
 8001dd0:	f7fe ff90 	bl	8000cf4 <HAL_Init>
  SystemClock_Config();
 8001dd4:	f7ff ffa0 	bl	8001d18 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dd8:	4ba5      	ldr	r3, [pc, #660]	; (8002070 <main+0x2a8>)
 8001dda:	9401      	str	r4, [sp, #4]
 8001ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D2_Pin|D3_Pin|D4_Pin|D5_Pin 
 8001dde:	48a5      	ldr	r0, [pc, #660]	; (8002074 <main+0x2ac>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de0:	f042 0210 	orr.w	r2, r2, #16
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
 8001de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de8:	f002 0210 	and.w	r2, r2, #16
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df0:	9402      	str	r4, [sp, #8]
 8001df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001e00:	9202      	str	r2, [sp, #8]
 8001e02:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	9403      	str	r4, [sp, #12]
 8001e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e08:	f042 0202 	orr.w	r2, r2, #2
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e10:	f002 0202 	and.w	r2, r2, #2
 8001e14:	9203      	str	r2, [sp, #12]
 8001e16:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e18:	9404      	str	r4, [sp, #16]
 8001e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1c:	f042 0208 	orr.w	r2, r2, #8
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, D2_Pin|D3_Pin|D4_Pin|D5_Pin 
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e30:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, D2_Pin|D3_Pin|D4_Pin|D5_Pin 
 8001e32:	f7ff f8f3 	bl	800101c <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|D8_Pin|D9_Pin 
                          |D10_Pin|D11_Pin|D12_Pin|D13_Pin 
                          |D14_Pin|D15_Pin|D0_Pin|D1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3c:	488e      	ldr	r0, [pc, #568]	; (8002078 <main+0x2b0>)
 8001e3e:	f7ff f8ed 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_Pin|RD_Pin|WR_Pin|RS_Pin 
 8001e42:	2201      	movs	r2, #1
 8001e44:	21f8      	movs	r1, #248	; 0xf8
 8001e46:	488d      	ldr	r0, [pc, #564]	; (800207c <main+0x2b4>)
 8001e48:	f7ff f8e8 	bl	800101c <HAL_GPIO_WritePin>
                          |T_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	4889      	ldr	r0, [pc, #548]	; (8002078 <main+0x2b0>)
 8001e52:	f7ff f8e3 	bl	800101c <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin|D8_Pin|D9_Pin 
                          |D10_Pin|D11_Pin|D12_Pin|D13_Pin 
                          |D14_Pin|D15_Pin|D0_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin 
 8001e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5e:	a905      	add	r1, sp, #20
 8001e60:	4884      	ldr	r0, [pc, #528]	; (8002074 <main+0x2ac>)
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D4_Pin|D5_Pin 
 8001e62:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6a:	f7fe fff1 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin WP_Pin */
  GPIO_InitStruct.Pin = CS_Pin|WP_Pin;
 8001e6e:	f44f 6390 	mov.w	r3, #1152	; 0x480
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	a905      	add	r1, sp, #20
 8001e74:	4880      	ldr	r0, [pc, #512]	; (8002078 <main+0x2b0>)
  GPIO_InitStruct.Pin = CS_Pin|WP_Pin;
 8001e76:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f7fe ffe7 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001e82:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001e84:	a905      	add	r1, sp, #20
 8001e86:	487d      	ldr	r0, [pc, #500]	; (800207c <main+0x2b4>)
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001e88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f7fe ffdf 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin RD_Pin WR_Pin RS_Pin 
                           T_CS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|RD_Pin|WR_Pin|RS_Pin 
 8001e92:	23f8      	movs	r3, #248	; 0xf8
                          |T_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e94:	a905      	add	r1, sp, #20
 8001e96:	4879      	ldr	r0, [pc, #484]	; (800207c <main+0x2b4>)
  GPIO_InitStruct.Pin = RESET_Pin|RD_Pin|WR_Pin|RS_Pin 
 8001e98:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	9606      	str	r6, [sp, #24]
  hspi3.Instance = SPI3;
 8001ea0:	4d77      	ldr	r5, [pc, #476]	; (8002080 <main+0x2b8>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea2:	f7fe ffd5 	bl	8000e50 <HAL_GPIO_Init>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4a77      	ldr	r2, [pc, #476]	; (8002084 <main+0x2bc>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea8:	60ac      	str	r4, [r5, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001eae:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb6:	61ab      	str	r3, [r5, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eb8:	2318      	movs	r3, #24
 8001eba:	61eb      	str	r3, [r5, #28]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ebc:	4628      	mov	r0, r5
  hspi3.Init.CRCPolynomial = 10;
 8001ebe:	230a      	movs	r3, #10
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec0:	60ec      	str	r4, [r5, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec2:	612c      	str	r4, [r5, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec4:	616c      	str	r4, [r5, #20]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec6:	622c      	str	r4, [r5, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec8:	626c      	str	r4, [r5, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eca:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ecc:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ece:	f7ff fb52 	bl	8001576 <HAL_SPI_Init>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	b100      	cbz	r0, 8001ed8 <main+0x110>
 8001ed6:	e7fe      	b.n	8001ed6 <main+0x10e>
  HAL_SPI_Init(&hspi3);
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f7ff fb4c 	bl	8001576 <HAL_SPI_Init>
  SSD1289_Init();
 8001ede:	f000 fa6d 	bl	80023bc <SSD1289_Init>
  SSD1289_Clear_Screen();
 8001ee2:	f000 fa66 	bl	80023b2 <SSD1289_Clear_Screen>
  Welcome();
 8001ee6:	f7ff fd35 	bl	8001954 <Welcome>
		  	  score_old = score;
 8001eea:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80020a0 <main+0x2d8>
			  if(score_old > high_score){
 8001eee:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80020a4 <main+0x2dc>
	  if(!Read_IRQ()){
 8001ef2:	f000 fc69 	bl	80027c8 <Read_IRQ>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d1fb      	bne.n	8001ef2 <main+0x12a>
		  if((game_over==NO)||Button_Press(X_BUT, Y_BUT, BUT_WIDTH, BUT_HEIGH)){
 8001efa:	2c00      	cmp	r4, #0
 8001efc:	f040 8086 	bne.w	800200c <main+0x244>
		  	  score_old = score;
 8001f00:	f8b8 4000 	ldrh.w	r4, [r8]
			  Init_Game();
 8001f04:	f7ff fe80 	bl	8001c08 <Init_Game>
			  if(score_old > high_score){
 8001f08:	f8ba 3000 	ldrh.w	r3, [sl]
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	dd08      	ble.n	8001f22 <main+0x15a>
			  		Print_Score(high_score, 300, Hscolor);
 8001f10:	f24f 021f 	movw	r2, #61471	; 0xf01f
 8001f14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f18:	4620      	mov	r0, r4
			  		high_score = score_old;
 8001f1a:	f8aa 4000 	strh.w	r4, [sl]
			  		Print_Score(high_score, 300, Hscolor);
 8001f1e:	f7ff fda5 	bl	8001a6c <Print_Score>
 8001f22:	4e59      	ldr	r6, [pc, #356]	; (8002088 <main+0x2c0>)
 8001f24:	4c59      	ldr	r4, [pc, #356]	; (800208c <main+0x2c4>)
  int game_over=NO;
 8001f26:	2700      	movs	r7, #0
					  if(x1 == 70){	/*Neu ong khoi 1 di qua toa to 110 thi tao ong khoi 2*/
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <main+0x2c0>)
 8001f2a:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80020a8 <main+0x2e0>
 8001f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f32:	2b46      	cmp	r3, #70	; 0x46
 8001f34:	d10f      	bne.n	8001f56 <main+0x18e>
						  x2 = 320;
 8001f36:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f3a:	8023      	strh	r3, [r4, #0]
						  heigh_pill2 = list_heigh[rand()%15];
 8001f3c:	f000 fd0e 	bl	800295c <rand>
 8001f40:	230f      	movs	r3, #15
 8001f42:	fb90 f3f3 	sdiv	r3, r0, r3
 8001f46:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001f4a:	1ac3      	subs	r3, r0, r3
 8001f4c:	4a50      	ldr	r2, [pc, #320]	; (8002090 <main+0x2c8>)
 8001f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f52:	f8ab 3000 	strh.w	r3, [fp]
					  if(x2 == 70){   /*Neu ong khoi di qua toa do 110 thi tao them ong khoi*/
 8001f56:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f5a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80020ac <main+0x2e4>
 8001f5e:	2b46      	cmp	r3, #70	; 0x46
 8001f60:	d10f      	bne.n	8001f82 <main+0x1ba>
						  x1 = 320;
 8001f62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f66:	8033      	strh	r3, [r6, #0]
						  heigh_pill1 = list_heigh[rand()%15];
 8001f68:	f000 fcf8 	bl	800295c <rand>
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	fb90 f3f3 	sdiv	r3, r0, r3
 8001f72:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001f76:	1ac3      	subs	r3, r0, r3
 8001f78:	4945      	ldr	r1, [pc, #276]	; (8002090 <main+0x2c8>)
 8001f7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f7e:	f8a9 3000 	strh.w	r3, [r9]
					  Draw_Pillar(x1, heigh_pill1);
 8001f82:	f8b9 1000 	ldrh.w	r1, [r9]
 8001f86:	f9b6 0000 	ldrsh.w	r0, [r6]
 8001f8a:	4d42      	ldr	r5, [pc, #264]	; (8002094 <main+0x2cc>)
 8001f8c:	f7ff fd22 	bl	80019d4 <Draw_Pillar>
					  Draw_Pillar(x2, heigh_pill2);
 8001f90:	f8bb 1000 	ldrh.w	r1, [fp]
 8001f94:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001f98:	f7ff fd1c 	bl	80019d4 <Draw_Pillar>
					  if(!Read_IRQ()){	/*Neu co tin hieu cam ung*/
 8001f9c:	f000 fc14 	bl	80027c8 <Read_IRQ>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d13e      	bne.n	8002022 <main+0x25a>
						  y_bird -= 5;
 8001fa4:	882b      	ldrh	r3, [r5, #0]
 8001fa6:	3b05      	subs	r3, #5
 8001fa8:	802b      	strh	r3, [r5, #0]
						  c = 1;
 8001faa:	2701      	movs	r7, #1
					  if(x1 > 70){
 8001fac:	f9b6 0000 	ldrsh.w	r0, [r6]
 8001fb0:	4b39      	ldr	r3, [pc, #228]	; (8002098 <main+0x2d0>)
 8001fb2:	493a      	ldr	r1, [pc, #232]	; (800209c <main+0x2d4>)
 8001fb4:	2846      	cmp	r0, #70	; 0x46
						  x_com = x2;
 8001fb6:	bfd9      	ittee	le
 8001fb8:	8822      	ldrhle	r2, [r4, #0]
 8001fba:	801a      	strhle	r2, [r3, #0]
						  x_com = x1;
 8001fbc:	8018      	strhgt	r0, [r3, #0]
						  h_com = heigh_pill1-1;
 8001fbe:	f8b9 2000 	ldrhgt.w	r2, [r9]
						  h_com = heigh_pill2-1;
 8001fc2:	bfd8      	it	le
 8001fc4:	f8bb 2000 	ldrhle.w	r2, [fp]
					  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8001fc8:	881b      	ldrh	r3, [r3, #0]
						  h_com = heigh_pill2-1;
 8001fca:	3a01      	subs	r2, #1
					  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8001fcc:	2b88      	cmp	r3, #136	; 0x88
						  h_com = heigh_pill2-1;
 8001fce:	800a      	strh	r2, [r1, #0]
					  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8001fd0:	d107      	bne.n	8001fe2 <main+0x21a>
 8001fd2:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001fd6:	880a      	ldrh	r2, [r1, #0]
 8001fd8:	4290      	cmp	r0, r2
 8001fda:	dd14      	ble.n	8002006 <main+0x23e>
 8001fdc:	3228      	adds	r2, #40	; 0x28
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	dc11      	bgt.n	8002006 <main+0x23e>
						((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8001fe2:	880a      	ldrh	r2, [r1, #0]
 8001fe4:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001fe8:	1c51      	adds	r1, r2, #1
					  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8001fea:	4288      	cmp	r0, r1
 8001fec:	dc03      	bgt.n	8001ff6 <main+0x22e>
						((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8001fee:	f1a3 0146 	sub.w	r1, r3, #70	; 0x46
 8001ff2:	2942      	cmp	r1, #66	; 0x42
 8001ff4:	d907      	bls.n	8002006 <main+0x23e>
						(((y_bird+HEIGH_BIRD)>=(h_com+DISTANCE))&&
 8001ff6:	3228      	adds	r2, #40	; 0x28
						(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8001ff8:	4290      	cmp	r0, r2
 8001ffa:	dd02      	ble.n	8002002 <main+0x23a>
						(((y_bird+HEIGH_BIRD)>=(h_com+DISTANCE))&&
 8001ffc:	3b46      	subs	r3, #70	; 0x46
 8001ffe:	2b42      	cmp	r3, #66	; 0x42
 8002000:	d901      	bls.n	8002006 <main+0x23e>
						(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8002002:	28c3      	cmp	r0, #195	; 0xc3
 8002004:	dd13      	ble.n	800202e <main+0x266>
						  Game_Over();
 8002006:	f7ff fd6f 	bl	8001ae8 <Game_Over>
						  break;
 800200a:	e008      	b.n	800201e <main+0x256>
		  if((game_over==NO)||Button_Press(X_BUT, Y_BUT, BUT_WIDTH, BUT_HEIGH)){
 800200c:	2330      	movs	r3, #48	; 0x30
 800200e:	2231      	movs	r2, #49	; 0x31
 8002010:	2164      	movs	r1, #100	; 0x64
 8002012:	208c      	movs	r0, #140	; 0x8c
 8002014:	f7ff fdd0 	bl	8001bb8 <Button_Press>
 8002018:	2800      	cmp	r0, #0
 800201a:	f47f af71 	bne.w	8001f00 <main+0x138>
 800201e:	2401      	movs	r4, #1
 8002020:	e767      	b.n	8001ef2 <main+0x12a>
					  else if(c){	// Neu chua cham lan nao thi chim van dung yen
 8002022:	2f00      	cmp	r7, #0
 8002024:	d0c2      	beq.n	8001fac <main+0x1e4>
						  y_bird += 2;
 8002026:	882b      	ldrh	r3, [r5, #0]
 8002028:	3302      	adds	r3, #2
 800202a:	802b      	strh	r3, [r5, #0]
 800202c:	e7be      	b.n	8001fac <main+0x1e4>
					  if(x1 == SCORED || x2 == SCORED){
 800202e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8002032:	2b45      	cmp	r3, #69	; 0x45
 8002034:	d003      	beq.n	800203e <main+0x276>
 8002036:	f9b4 3000 	ldrsh.w	r3, [r4]
 800203a:	2b45      	cmp	r3, #69	; 0x45
 800203c:	d109      	bne.n	8002052 <main+0x28a>
						  score += 1;
 800203e:	f8b8 0000 	ldrh.w	r0, [r8]
 8002042:	3001      	adds	r0, #1
 8002044:	b280      	uxth	r0, r0
						  Print_Score(score, X_SCORE, Blue);
 8002046:	221f      	movs	r2, #31
 8002048:	214b      	movs	r1, #75	; 0x4b
						  score += 1;
 800204a:	f8a8 0000 	strh.w	r0, [r8]
						  Print_Score(score, X_SCORE, Blue);
 800204e:	f7ff fd0d 	bl	8001a6c <Print_Score>
					  if(c){
 8002052:	b147      	cbz	r7, 8002066 <main+0x29e>
						  Bird_Fly(y_bird);
 8002054:	8828      	ldrh	r0, [r5, #0]
 8002056:	f7ff fceb 	bl	8001a30 <Bird_Fly>
						  x1--;
 800205a:	8833      	ldrh	r3, [r6, #0]
 800205c:	3b01      	subs	r3, #1
 800205e:	8033      	strh	r3, [r6, #0]
						  x2--;
 8002060:	8823      	ldrh	r3, [r4, #0]
 8002062:	3b01      	subs	r3, #1
 8002064:	8023      	strh	r3, [r4, #0]
					  HAL_Delay(10);
 8002066:	200a      	movs	r0, #10
 8002068:	f7fe fe70 	bl	8000d4c <HAL_Delay>
					  if(x1 == 70){	/*Neu ong khoi 1 di qua toa to 110 thi tao ong khoi 2*/
 800206c:	e75c      	b.n	8001f28 <main+0x160>
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40021000 	.word	0x40021000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020c00 	.word	0x40020c00
 8002080:	2000272c 	.word	0x2000272c
 8002084:	40003c00 	.word	0x40003c00
 8002088:	20002712 	.word	0x20002712
 800208c:	20002714 	.word	0x20002714
 8002090:	20002784 	.word	0x20002784
 8002094:	20002718 	.word	0x20002718
 8002098:	20002716 	.word	0x20002716
 800209c:	20002708 	.word	0x20002708
 80020a0:	20002710 	.word	0x20002710
 80020a4:	2000270e 	.word	0x2000270e
 80020a8:	2000270c 	.word	0x2000270c
 80020ac:	2000270a 	.word	0x2000270a

080020b0 <SSD1289_Write_Com>:
    *a = temp;
}

/*Ghui dia chi thanh ghi*/
void SSD1289_Write_Com(uint16_t  DH)
{
 80020b0:	b570      	push	{r4, r5, r6, lr}
  RSN;
 80020b2:	4c11      	ldr	r4, [pc, #68]	; (80020f8 <SSD1289_Write_Com+0x48>)
	CSN;
 80020b4:	4d11      	ldr	r5, [pc, #68]	; (80020fc <SSD1289_Write_Com+0x4c>)
{
 80020b6:	4606      	mov	r6, r0
  RSN;
 80020b8:	2200      	movs	r2, #0
 80020ba:	4620      	mov	r0, r4
 80020bc:	2140      	movs	r1, #64	; 0x40
 80020be:	f7fe ffad 	bl	800101c <HAL_GPIO_WritePin>
	CSN;
 80020c2:	4628      	mov	r0, r5
 80020c4:	2200      	movs	r2, #0
 80020c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ca:	f7fe ffa7 	bl	800101c <HAL_GPIO_WritePin>
	GPIOE -> ODR = DH;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <SSD1289_Write_Com+0x50>)
	WRN;
 80020d0:	4620      	mov	r0, r4
	GPIOE -> ODR = DH;
 80020d2:	615e      	str	r6, [r3, #20]
	WRN;
 80020d4:	2200      	movs	r2, #0
 80020d6:	2120      	movs	r1, #32
 80020d8:	f7fe ffa0 	bl	800101c <HAL_GPIO_WritePin>
	WR;
 80020dc:	4620      	mov	r0, r4
 80020de:	2201      	movs	r2, #1
 80020e0:	2120      	movs	r1, #32
 80020e2:	f7fe ff9b 	bl	800101c <HAL_GPIO_WritePin>
	CS;
 80020e6:	4628      	mov	r0, r5
 80020e8:	2201      	movs	r2, #1
 80020ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 80020ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	CS;
 80020f2:	f7fe bf93 	b.w	800101c <HAL_GPIO_WritePin>
 80020f6:	bf00      	nop
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40020400 	.word	0x40020400
 8002100:	40021000 	.word	0x40021000

08002104 <SSD1289_Write_Data>:

/*Gui du lieu ghi vao thanh ghi*/
void SSD1289_Write_Data(uint16_t DH)
{
 8002104:	b570      	push	{r4, r5, r6, lr}
  RS;
 8002106:	4c11      	ldr	r4, [pc, #68]	; (800214c <SSD1289_Write_Data+0x48>)
	CSN;
 8002108:	4d11      	ldr	r5, [pc, #68]	; (8002150 <SSD1289_Write_Data+0x4c>)
{
 800210a:	4606      	mov	r6, r0
  RS;
 800210c:	2201      	movs	r2, #1
 800210e:	4620      	mov	r0, r4
 8002110:	2140      	movs	r1, #64	; 0x40
 8002112:	f7fe ff83 	bl	800101c <HAL_GPIO_WritePin>
	CSN;
 8002116:	4628      	mov	r0, r5
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800211e:	f7fe ff7d 	bl	800101c <HAL_GPIO_WritePin>
	GPIOE -> ODR = DH;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <SSD1289_Write_Data+0x50>)
	WRN;
 8002124:	4620      	mov	r0, r4
	GPIOE -> ODR = DH;
 8002126:	615e      	str	r6, [r3, #20]
	WRN;
 8002128:	2200      	movs	r2, #0
 800212a:	2120      	movs	r1, #32
 800212c:	f7fe ff76 	bl	800101c <HAL_GPIO_WritePin>
	WR;
 8002130:	4620      	mov	r0, r4
 8002132:	2201      	movs	r2, #1
 8002134:	2120      	movs	r1, #32
 8002136:	f7fe ff71 	bl	800101c <HAL_GPIO_WritePin>
	CS;
 800213a:	4628      	mov	r0, r5
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 8002142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	CS;
 8002146:	f7fe bf69 	b.w	800101c <HAL_GPIO_WritePin>
 800214a:	bf00      	nop
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400
 8002154:	40021000 	.word	0x40021000

08002158 <SSD1289_Write_Com_Data>:

/*Gui dong thoi dia chi thanh ghi va du lieu thanh ghi*/
void SSD1289_Write_Com_Data(uint16_t com1,uint16_t dat1)
{
 8002158:	b510      	push	{r4, lr}
 800215a:	460c      	mov	r4, r1
   SSD1289_Write_Com(com1);
 800215c:	f7ff ffa8 	bl	80020b0 <SSD1289_Write_Com>
   SSD1289_Write_Data(dat1);
 8002160:	4620      	mov	r0, r4
}
 8002162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   SSD1289_Write_Data(dat1);
 8002166:	f7ff bfcd 	b.w	8002104 <SSD1289_Write_Data>

0800216a <SSD1289_Address_Set>:
{
	/*Doi toa do ve toa do mong muon*/
	swap(&x1, &y1);
	swap(&x2, &y2);

	SSD1289_Write_Com_Data(0x0044,(x2<<8)+x1);
 800216a:	eb01 2303 	add.w	r3, r1, r3, lsl #8
{
 800216e:	b570      	push	{r4, r5, r6, lr}
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
	SSD1289_Write_Com_Data(0x0044,(x2<<8)+x1);
 8002174:	2044      	movs	r0, #68	; 0x44
 8002176:	b299      	uxth	r1, r3
{
 8002178:	4616      	mov	r6, r2
	SSD1289_Write_Com_Data(0x0044,(x2<<8)+x1);
 800217a:	f7ff ffed 	bl	8002158 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x0045, y1);
 800217e:	4621      	mov	r1, r4
 8002180:	2045      	movs	r0, #69	; 0x45
 8002182:	f7ff ffe9 	bl	8002158 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x0046, y2);
 8002186:	4631      	mov	r1, r6
 8002188:	2046      	movs	r0, #70	; 0x46
 800218a:	f7ff ffe5 	bl	8002158 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x004E, x1);
 800218e:	4629      	mov	r1, r5
 8002190:	204e      	movs	r0, #78	; 0x4e
 8002192:	f7ff ffe1 	bl	8002158 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com_Data(0x004F, y1);
 8002196:	4621      	mov	r1, r4
 8002198:	204f      	movs	r0, #79	; 0x4f
 800219a:	f7ff ffdd 	bl	8002158 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com(0x0022);
 800219e:	2022      	movs	r0, #34	; 0x22
}
 80021a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SSD1289_Write_Com(0x0022);
 80021a4:	f7ff bf84 	b.w	80020b0 <SSD1289_Write_Com>

080021a8 <SSD1289_Write_Pixel>:

/*Ghi pixel*/
void SSD1289_Write_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CSN;
 80021aa:	4c0f      	ldr	r4, [pc, #60]	; (80021e8 <SSD1289_Write_Pixel+0x40>)
{
 80021ac:	4606      	mov	r6, r0
 80021ae:	460f      	mov	r7, r1
 80021b0:	4615      	mov	r5, r2
  CSN;
 80021b2:	4620      	mov	r0, r4
 80021b4:	2200      	movs	r2, #0
 80021b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ba:	f7fe ff2f 	bl	800101c <HAL_GPIO_WritePin>

	swap(&x, &y);
  SSD1289_Write_Com_Data(0x004E, x);
 80021be:	4639      	mov	r1, r7
 80021c0:	204e      	movs	r0, #78	; 0x4e
 80021c2:	f7ff ffc9 	bl	8002158 <SSD1289_Write_Com_Data>
  SSD1289_Write_Com_Data(0x004F, y);
 80021c6:	4631      	mov	r1, r6
 80021c8:	204f      	movs	r0, #79	; 0x4f
 80021ca:	f7ff ffc5 	bl	8002158 <SSD1289_Write_Com_Data>
  SSD1289_Write_Com_Data(0x0022, color);
 80021ce:	4629      	mov	r1, r5
 80021d0:	2022      	movs	r0, #34	; 0x22
 80021d2:	f7ff ffc1 	bl	8002158 <SSD1289_Write_Com_Data>

  CS;
 80021d6:	4620      	mov	r0, r4
 80021d8:	2201      	movs	r2, #1
 80021da:	f44f 6180 	mov.w	r1, #1024	; 0x400
}
 80021de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  CS;
 80021e2:	f7fe bf1b 	b.w	800101c <HAL_GPIO_WritePin>
 80021e6:	bf00      	nop
 80021e8:	40020400 	.word	0x40020400

080021ec <SSD1289_Fill_Color>:
    SSD1289_Write_Com_Data(0x004F, y_pos);
    SSD1289_Write_Com(0x0022);
}

/*Ve mau*/
void SSD1289_Fill_Color(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){	/*To mau trong khoang da duoc quy dinh*/
 80021ec:	b570      	push	{r4, r5, r6, lr}
	uint16_t max_index = (x2 - x1 + 1)*(y2 - y1 + 1);
 80021ee:	1a14      	subs	r4, r2, r0
 80021f0:	1a5d      	subs	r5, r3, r1
 80021f2:	3401      	adds	r4, #1
 80021f4:	3501      	adds	r5, #1
 80021f6:	fb14 f405 	smulbb	r4, r4, r5
void SSD1289_Fill_Color(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){	/*To mau trong khoang da duoc quy dinh*/
 80021fa:	f8bd 6010 	ldrh.w	r6, [sp, #16]
	uint16_t max_index = (x2 - x1 + 1)*(y2 - y1 + 1);
 80021fe:	b2a4      	uxth	r4, r4
	SSD1289_Address_Set(x1, y1, x2, y2);
 8002200:	f7ff ffb3 	bl	800216a <SSD1289_Address_Set>

	while(max_index){
 8002204:	b904      	cbnz	r4, 8002208 <SSD1289_Fill_Color+0x1c>
			SSD1289_Write_Data(color);
			max_index--;
	}
}
 8002206:	bd70      	pop	{r4, r5, r6, pc}
			SSD1289_Write_Data(color);
 8002208:	4630      	mov	r0, r6
			max_index--;
 800220a:	3c01      	subs	r4, #1
			SSD1289_Write_Data(color);
 800220c:	f7ff ff7a 	bl	8002104 <SSD1289_Write_Data>
			max_index--;
 8002210:	b2a4      	uxth	r4, r4
 8002212:	e7f7      	b.n	8002204 <SSD1289_Fill_Color+0x18>

08002214 <SSD1289_Write_Pic_Coor>:


void SSD1289_Write_Pic_Coor(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *pic){
 8002214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002218:	440b      	add	r3, r1
 800221a:	9f08      	ldr	r7, [sp, #32]
 800221c:	4681      	mov	r9, r0
 800221e:	460c      	mov	r4, r1
 8002220:	4690      	mov	r8, r2
 8002222:	fa1f fa83 	uxth.w	sl, r3
	uint16_t index_x = 0, index_y = 0, i = 0;
 8002226:	2500      	movs	r5, #0
	for(index_y = 0; index_y < width; index_y++){
 8002228:	4554      	cmp	r4, sl
 800222a:	d013      	beq.n	8002254 <SSD1289_Write_Pic_Coor+0x40>
 800222c:	2600      	movs	r6, #0
 800222e:	e007      	b.n	8002240 <SSD1289_Write_Pic_Coor+0x2c>
		for(index_x = 0; index_x < length; index_x++){
			SSD1289_Write_Pixel(x + index_x, y + index_y, pic[i]);
 8002230:	4448      	add	r0, r9
 8002232:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 8002236:	4621      	mov	r1, r4
 8002238:	b280      	uxth	r0, r0
 800223a:	f7ff ffb5 	bl	80021a8 <SSD1289_Write_Pixel>
 800223e:	3601      	adds	r6, #1
 8002240:	b2b0      	uxth	r0, r6
 8002242:	182b      	adds	r3, r5, r0
		for(index_x = 0; index_x < length; index_x++){
 8002244:	45b0      	cmp	r8, r6
 8002246:	b29b      	uxth	r3, r3
 8002248:	d1f2      	bne.n	8002230 <SSD1289_Write_Pic_Coor+0x1c>
 800224a:	4445      	add	r5, r8
 800224c:	3401      	adds	r4, #1
 800224e:	b2ad      	uxth	r5, r5
 8002250:	b2a4      	uxth	r4, r4
 8002252:	e7e9      	b.n	8002228 <SSD1289_Write_Pic_Coor+0x14>
 8002254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002258 <SSD1289_Print_Char>:
			i++;
		}
	}
}
void SSD1289_Print_Char(uint16_t x_pos, uint16_t y_pos, uint16_t font_size, uint16_t color, uint16_t back_color, char ch){
 8002258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225c:	b089      	sub	sp, #36	; 0x24
	int i = 0;
	int j = 0;
	uint16_t y = y_pos;
	uint16_t column = 0;
	if(font_size == 0)
		font_size = 1;
 800225e:	2a00      	cmp	r2, #0
 8002260:	bf14      	ite	ne
 8002262:	4616      	movne	r6, r2
 8002264:	2601      	moveq	r6, #1
void SSD1289_Print_Char(uint16_t x_pos, uint16_t y_pos, uint16_t font_size, uint16_t color, uint16_t back_color, char ch){
 8002266:	9305      	str	r3, [sp, #20]
 8002268:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800226c:	9306      	str	r3, [sp, #24]
	uint16_t *value = font[(uint16_t)ch-32];
 800226e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <SSD1289_Print_Char+0x94>)
void SSD1289_Print_Char(uint16_t x_pos, uint16_t y_pos, uint16_t font_size, uint16_t color, uint16_t back_color, char ch){
 8002274:	468b      	mov	fp, r1
	uint16_t *value = font[(uint16_t)ch-32];
 8002276:	3b20      	subs	r3, #32
 8002278:	210a      	movs	r1, #10
 800227a:	fb01 2303 	mla	r3, r1, r3, r2
 800227e:	f1a3 0a02 	sub.w	sl, r3, #2
 8002282:	3308      	adds	r3, #8
 8002284:	9304      	str	r3, [sp, #16]
 8002286:	f10b 33ff 	add.w	r3, fp, #4294967295
 800228a:	1e44      	subs	r4, r0, #1
 800228c:	4433      	add	r3, r6
 800228e:	4434      	add	r4, r6
 8002290:	b29b      	uxth	r3, r3
void SSD1289_Print_Char(uint16_t x_pos, uint16_t y_pos, uint16_t font_size, uint16_t color, uint16_t back_color, char ch){
 8002292:	4605      	mov	r5, r0
 8002294:	b2a4      	uxth	r4, r4
 8002296:	9307      	str	r3, [sp, #28]
	for(i = 0; i < 5; i++){
		column = value[i];
 8002298:	f83a 3f02 	ldrh.w	r3, [sl, #2]!
 800229c:	9f07      	ldr	r7, [sp, #28]
 800229e:	9303      	str	r3, [sp, #12]
		y_pos = y;
 80022a0:	46d8      	mov	r8, fp
		for(j = 0; j < 7; j++){
 80022a2:	f04f 0900 	mov.w	r9, #0
			if((column >> j) & 0x0001)
 80022a6:	9b03      	ldr	r3, [sp, #12]
 80022a8:	fa43 f309 	asr.w	r3, r3, r9
 80022ac:	07db      	lsls	r3, r3, #31
				SSD1289_Fill_Color(x_pos, y_pos, (x_pos + font_size - 1), (y_pos +font_size - 1), color);
 80022ae:	bf4c      	ite	mi
 80022b0:	9b05      	ldrmi	r3, [sp, #20]
			else{
				SSD1289_Fill_Color(x_pos, y_pos, (x_pos + font_size - 1), (y_pos +font_size - 1), back_color);
 80022b2:	9b06      	ldrpl	r3, [sp, #24]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	4641      	mov	r1, r8
 80022b8:	463b      	mov	r3, r7
 80022ba:	4622      	mov	r2, r4
 80022bc:	4628      	mov	r0, r5
		for(j = 0; j < 7; j++){
 80022be:	f109 0901 	add.w	r9, r9, #1
				SSD1289_Fill_Color(x_pos, y_pos, (x_pos + font_size - 1), (y_pos +font_size - 1), back_color);
 80022c2:	f7ff ff93 	bl	80021ec <SSD1289_Fill_Color>
			}
			y_pos += font_size;
 80022c6:	44b0      	add	r8, r6
 80022c8:	4437      	add	r7, r6
		for(j = 0; j < 7; j++){
 80022ca:	f1b9 0f07 	cmp.w	r9, #7
			y_pos += font_size;
 80022ce:	fa1f f888 	uxth.w	r8, r8
 80022d2:	b2bf      	uxth	r7, r7
		for(j = 0; j < 7; j++){
 80022d4:	d1e7      	bne.n	80022a6 <SSD1289_Print_Char+0x4e>
	for(i = 0; i < 5; i++){
 80022d6:	9b04      	ldr	r3, [sp, #16]
		}
		x_pos+= font_size;
 80022d8:	4435      	add	r5, r6
 80022da:	4434      	add	r4, r6
	for(i = 0; i < 5; i++){
 80022dc:	459a      	cmp	sl, r3
		x_pos+= font_size;
 80022de:	b2ad      	uxth	r5, r5
 80022e0:	b2a4      	uxth	r4, r4
	for(i = 0; i < 5; i++){
 80022e2:	d1d9      	bne.n	8002298 <SSD1289_Print_Char+0x40>
	}
}
 80022e4:	b009      	add	sp, #36	; 0x24
 80022e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ea:	bf00      	nop
 80022ec:	200022c4 	.word	0x200022c4

080022f0 <SSD1289_Print_String>:

void SSD1289_Print_String(uint16_t x_pos, uint16_t y_pos, uint16_t dis_char, uint16_t dis_line, uint16_t font_size, uint16_t color, uint16_t back_color, char *str){
 80022f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f4:	b085      	sub	sp, #20
 80022f6:	460d      	mov	r5, r1
 80022f8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80022fa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80022fe:	9102      	str	r1, [sp, #8]
 8002300:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8002304:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8002308:	9103      	str	r1, [sp, #12]
 800230a:	4682      	mov	sl, r0
	uint16_t x = x_pos;
	if(str == NULL)
 800230c:	b347      	cbz	r7, 8002360 <SSD1289_Print_String+0x70>
		return;
	do{
		if(*str == '\n'){
			str++;
			y_pos = y_pos +  font_size * 7 + dis_line;
 800230e:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
 8002312:	4498      	add	r8, r3
			x_pos = x;
		}
		SSD1289_Print_Char(x_pos, y_pos, font_size, color, back_color, *str++);
		x_pos += (font_size *5 + dis_char);
 8002314:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8002318:	441a      	add	r2, r3
 800231a:	fa1f f888 	uxth.w	r8, r8
 800231e:	fa1f fb82 	uxth.w	fp, r2
 8002322:	4604      	mov	r4, r0
		if(*str == '\n'){
 8002324:	783b      	ldrb	r3, [r7, #0]
 8002326:	2b0a      	cmp	r3, #10
			str++;
 8002328:	bf0a      	itet	eq
 800232a:	f107 0901 	addeq.w	r9, r7, #1
 800232e:	46b9      	movne	r9, r7
			y_pos = y_pos +  font_size * 7 + dis_line;
 8002330:	4445      	addeq	r5, r8
		SSD1289_Print_Char(x_pos, y_pos, font_size, color, back_color, *str++);
 8002332:	f899 3000 	ldrb.w	r3, [r9]
 8002336:	9301      	str	r3, [sp, #4]
			x_pos = x;
 8002338:	bf08      	it	eq
 800233a:	4654      	moveq	r4, sl
		SSD1289_Print_Char(x_pos, y_pos, font_size, color, back_color, *str++);
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	9300      	str	r3, [sp, #0]
			y_pos = y_pos +  font_size * 7 + dis_line;
 8002340:	bf08      	it	eq
 8002342:	b2ad      	uxtheq	r5, r5
		SSD1289_Print_Char(x_pos, y_pos, font_size, color, back_color, *str++);
 8002344:	9b02      	ldr	r3, [sp, #8]
 8002346:	4620      	mov	r0, r4
 8002348:	4632      	mov	r2, r6
 800234a:	4629      	mov	r1, r5
 800234c:	f7ff ff84 	bl	8002258 <SSD1289_Print_Char>
	}
	while(*str != '\0');
 8002350:	f899 3001 	ldrb.w	r3, [r9, #1]
		x_pos += (font_size *5 + dis_char);
 8002354:	445c      	add	r4, fp
		SSD1289_Print_Char(x_pos, y_pos, font_size, color, back_color, *str++);
 8002356:	f109 0701 	add.w	r7, r9, #1
		x_pos += (font_size *5 + dis_char);
 800235a:	b2a4      	uxth	r4, r4
	while(*str != '\0');
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e1      	bne.n	8002324 <SSD1289_Print_String+0x34>
}
 8002360:	b005      	add	sp, #20
 8002362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002366 <SSD1289_Draw_V_Line>:
	SSD1289_Print_String(x, y, 1, 1, 1, White, Black, string);
}
void SSD1289_Draw_V_Line(uint16_t x1, uint16_t y1, uint16_t y2, uint16_t color)
{

    if(y1 > y2)
 8002366:	4291      	cmp	r1, r2
{
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	4606      	mov	r6, r0
 800236c:	460d      	mov	r5, r1
 800236e:	4614      	mov	r4, r2
 8002370:	461f      	mov	r7, r3
    if(y1 > y2)
 8002372:	d901      	bls.n	8002378 <SSD1289_Draw_V_Line+0x12>
 8002374:	4615      	mov	r5, r2
 8002376:	460c      	mov	r4, r1
    {
       swap(&y1, &y2);
    }

    while(y2 > (y1-1))
 8002378:	42a5      	cmp	r5, r4
 800237a:	dd00      	ble.n	800237e <SSD1289_Draw_V_Line+0x18>
    {
        SSD1289_Write_Pixel(x1, y2, color);
        y2--;
    }
}
 800237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SSD1289_Write_Pixel(x1, y2, color);
 800237e:	4621      	mov	r1, r4
 8002380:	463a      	mov	r2, r7
 8002382:	4630      	mov	r0, r6
        y2--;
 8002384:	3c01      	subs	r4, #1
        SSD1289_Write_Pixel(x1, y2, color);
 8002386:	f7ff ff0f 	bl	80021a8 <SSD1289_Write_Pixel>
        y2--;
 800238a:	b2a4      	uxth	r4, r4
 800238c:	e7f4      	b.n	8002378 <SSD1289_Draw_V_Line+0x12>

0800238e <SSD1289_Write_Back_Ground>:
    }
  }
}

void SSD1289_Write_Back_Ground(uint16_t color)
{
 800238e:	b570      	push	{r4, r5, r6, lr}
 8002390:	4606      	mov	r6, r0
	uint16_t x = 0, y = 0;
	for(y = 0; y < 240; y++){
 8002392:	2400      	movs	r4, #0
{
 8002394:	2500      	movs	r5, #0
		for(x = 0; x < 320;  x++){
			SSD1289_Write_Pixel(x, y, color);
 8002396:	b2a8      	uxth	r0, r5
 8002398:	4632      	mov	r2, r6
 800239a:	4621      	mov	r1, r4
 800239c:	3501      	adds	r5, #1
 800239e:	f7ff ff03 	bl	80021a8 <SSD1289_Write_Pixel>
		for(x = 0; x < 320;  x++){
 80023a2:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 80023a6:	d1f6      	bne.n	8002396 <SSD1289_Write_Back_Ground+0x8>
	for(y = 0; y < 240; y++){
 80023a8:	3401      	adds	r4, #1
 80023aa:	b2a4      	uxth	r4, r4
 80023ac:	2cf0      	cmp	r4, #240	; 0xf0
 80023ae:	d1f1      	bne.n	8002394 <SSD1289_Write_Back_Ground+0x6>
 80023b0:	bd70      	pop	{r4, r5, r6, pc}

080023b2 <SSD1289_Clear_Screen>:
		}
	}
}
void SSD1289_Clear_Screen(){
	SSD1289_Write_Back_Ground(White);
 80023b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023b6:	f7ff bfea 	b.w	800238e <SSD1289_Write_Back_Ground>
	...

080023bc <SSD1289_Init>:
}
void SSD1289_Init(void)
{
 80023bc:	b510      	push	{r4, lr}

	RST;
 80023be:	4cae      	ldr	r4, [pc, #696]	; (8002678 <SSD1289_Init+0x2bc>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	2108      	movs	r1, #8
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7fe fe29 	bl	800101c <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 80023ca:	2064      	movs	r0, #100	; 0x64
 80023cc:	f7fe fcbe 	bl	8000d4c <HAL_Delay>
	RSTN;;
 80023d0:	2200      	movs	r2, #0
 80023d2:	2108      	movs	r1, #8
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7fe fe21 	bl	800101c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023da:	2064      	movs	r0, #100	; 0x64
 80023dc:	f7fe fcb6 	bl	8000d4c <HAL_Delay>
	RST;
 80023e0:	4620      	mov	r0, r4
 80023e2:	2201      	movs	r2, #1
 80023e4:	2108      	movs	r1, #8
 80023e6:	f7fe fe19 	bl	800101c <HAL_GPIO_WritePin>
	CS;
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f0:	48a2      	ldr	r0, [pc, #648]	; (800267c <SSD1289_Init+0x2c0>)
 80023f2:	f7fe fe13 	bl	800101c <HAL_GPIO_WritePin>
	RD;
 80023f6:	4620      	mov	r0, r4
 80023f8:	2201      	movs	r2, #1
 80023fa:	2110      	movs	r1, #16
 80023fc:	f7fe fe0e 	bl	800101c <HAL_GPIO_WritePin>
	WR;
 8002400:	2201      	movs	r2, #1
 8002402:	2120      	movs	r1, #32
 8002404:	4620      	mov	r0, r4
 8002406:	f7fe fe09 	bl	800101c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800240a:	2064      	movs	r0, #100	; 0x64
 800240c:	f7fe fc9e 	bl	8000d4c <HAL_Delay>

    SSD1289_Write_Com_Data(0x0000,0x0001);    HAL_Delay(1);
 8002410:	2101      	movs	r1, #1
 8002412:	2000      	movs	r0, #0
 8002414:	f7ff fea0 	bl	8002158 <SSD1289_Write_Com_Data>
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe fc97 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0003,0xA8A4);    HAL_Delay(1);
 800241e:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8002422:	2003      	movs	r0, #3
 8002424:	f7ff fe98 	bl	8002158 <SSD1289_Write_Com_Data>
 8002428:	2001      	movs	r0, #1
 800242a:	f7fe fc8f 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x000C,0x0000);    HAL_Delay(1);
 800242e:	2100      	movs	r1, #0
 8002430:	200c      	movs	r0, #12
 8002432:	f7ff fe91 	bl	8002158 <SSD1289_Write_Com_Data>
 8002436:	2001      	movs	r0, #1
 8002438:	f7fe fc88 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x000D,0x080C);    HAL_Delay(1);
 800243c:	f640 010c 	movw	r1, #2060	; 0x80c
 8002440:	200d      	movs	r0, #13
 8002442:	f7ff fe89 	bl	8002158 <SSD1289_Write_Com_Data>
 8002446:	2001      	movs	r0, #1
 8002448:	f7fe fc80 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x000E,0x2B00);    HAL_Delay(1);
 800244c:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8002450:	200e      	movs	r0, #14
 8002452:	f7ff fe81 	bl	8002158 <SSD1289_Write_Com_Data>
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe fc78 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x001E,0x00B0);    HAL_Delay(1);
 800245c:	21b0      	movs	r1, #176	; 0xb0
 800245e:	201e      	movs	r0, #30
 8002460:	f7ff fe7a 	bl	8002158 <SSD1289_Write_Com_Data>
 8002464:	2001      	movs	r0, #1
 8002466:	f7fe fc71 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0001,0x293F);    HAL_Delay(1);
 800246a:	f642 113f 	movw	r1, #10559	; 0x293f
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff fe72 	bl	8002158 <SSD1289_Write_Com_Data>
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe fc69 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0002,0x0600);    HAL_Delay(1);
 800247a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800247e:	2002      	movs	r0, #2
 8002480:	f7ff fe6a 	bl	8002158 <SSD1289_Write_Com_Data>
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe fc61 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0010,0x0000);    HAL_Delay(1);
 800248a:	2100      	movs	r1, #0
 800248c:	2010      	movs	r0, #16
 800248e:	f7ff fe63 	bl	8002158 <SSD1289_Write_Com_Data>
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe fc5a 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0011,0x6070);    HAL_Delay(1);
 8002498:	f246 0170 	movw	r1, #24688	; 0x6070
 800249c:	2011      	movs	r0, #17
 800249e:	f7ff fe5b 	bl	8002158 <SSD1289_Write_Com_Data>
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7fe fc52 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0005,0x0000);    HAL_Delay(1);
 80024a8:	2100      	movs	r1, #0
 80024aa:	2005      	movs	r0, #5
 80024ac:	f7ff fe54 	bl	8002158 <SSD1289_Write_Com_Data>
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7fe fc4b 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0006,0x0000);    HAL_Delay(1);
 80024b6:	2100      	movs	r1, #0
 80024b8:	2006      	movs	r0, #6
 80024ba:	f7ff fe4d 	bl	8002158 <SSD1289_Write_Com_Data>
 80024be:	2001      	movs	r0, #1
 80024c0:	f7fe fc44 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0016,0xEF1C);    HAL_Delay(1);
 80024c4:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80024c8:	2016      	movs	r0, #22
 80024ca:	f7ff fe45 	bl	8002158 <SSD1289_Write_Com_Data>
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fe fc3c 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0017,0x0003);    HAL_Delay(1);
 80024d4:	2103      	movs	r1, #3
 80024d6:	2017      	movs	r0, #23
 80024d8:	f7ff fe3e 	bl	8002158 <SSD1289_Write_Com_Data>
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe fc35 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0007,0x0233);    HAL_Delay(1);
 80024e2:	f240 2133 	movw	r1, #563	; 0x233
 80024e6:	2007      	movs	r0, #7
 80024e8:	f7ff fe36 	bl	8002158 <SSD1289_Write_Com_Data>
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7fe fc2d 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x000B,0x0000);    HAL_Delay(1);
 80024f2:	2100      	movs	r1, #0
 80024f4:	200b      	movs	r0, #11
 80024f6:	f7ff fe2f 	bl	8002158 <SSD1289_Write_Com_Data>
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7fe fc26 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x000F,0x0000);    HAL_Delay(1);
 8002500:	2100      	movs	r1, #0
 8002502:	200f      	movs	r0, #15
 8002504:	f7ff fe28 	bl	8002158 <SSD1289_Write_Com_Data>
 8002508:	2001      	movs	r0, #1
 800250a:	f7fe fc1f 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0041,0x0000);    HAL_Delay(1);
 800250e:	2100      	movs	r1, #0
 8002510:	2041      	movs	r0, #65	; 0x41
 8002512:	f7ff fe21 	bl	8002158 <SSD1289_Write_Com_Data>
 8002516:	2001      	movs	r0, #1
 8002518:	f7fe fc18 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0042,0x0000);    HAL_Delay(1);
 800251c:	2100      	movs	r1, #0
 800251e:	2042      	movs	r0, #66	; 0x42
 8002520:	f7ff fe1a 	bl	8002158 <SSD1289_Write_Com_Data>
 8002524:	2001      	movs	r0, #1
 8002526:	f7fe fc11 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0048,0x0000);    HAL_Delay(1);
 800252a:	2100      	movs	r1, #0
 800252c:	2048      	movs	r0, #72	; 0x48
 800252e:	f7ff fe13 	bl	8002158 <SSD1289_Write_Com_Data>
 8002532:	2001      	movs	r0, #1
 8002534:	f7fe fc0a 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0049,0x013F);    HAL_Delay(1);
 8002538:	f240 113f 	movw	r1, #319	; 0x13f
 800253c:	2049      	movs	r0, #73	; 0x49
 800253e:	f7ff fe0b 	bl	8002158 <SSD1289_Write_Com_Data>
 8002542:	2001      	movs	r0, #1
 8002544:	f7fe fc02 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x004A,0x0000);    HAL_Delay(1);
 8002548:	2100      	movs	r1, #0
 800254a:	204a      	movs	r0, #74	; 0x4a
 800254c:	f7ff fe04 	bl	8002158 <SSD1289_Write_Com_Data>
 8002550:	2001      	movs	r0, #1
 8002552:	f7fe fbfb 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x004B,0x0000);    HAL_Delay(1);
 8002556:	2100      	movs	r1, #0
 8002558:	204b      	movs	r0, #75	; 0x4b
 800255a:	f7ff fdfd 	bl	8002158 <SSD1289_Write_Com_Data>
 800255e:	2001      	movs	r0, #1
 8002560:	f7fe fbf4 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0044,0xEF00);    HAL_Delay(1);
 8002564:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8002568:	2044      	movs	r0, #68	; 0x44
 800256a:	f7ff fdf5 	bl	8002158 <SSD1289_Write_Com_Data>
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe fbec 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0045,0x0000);    HAL_Delay(1);
 8002574:	2100      	movs	r1, #0
 8002576:	2045      	movs	r0, #69	; 0x45
 8002578:	f7ff fdee 	bl	8002158 <SSD1289_Write_Com_Data>
 800257c:	2001      	movs	r0, #1
 800257e:	f7fe fbe5 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0046,0x013F);    HAL_Delay(1);
 8002582:	f240 113f 	movw	r1, #319	; 0x13f
 8002586:	2046      	movs	r0, #70	; 0x46
 8002588:	f7ff fde6 	bl	8002158 <SSD1289_Write_Com_Data>
 800258c:	2001      	movs	r0, #1
 800258e:	f7fe fbdd 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0030,0x0707);    HAL_Delay(1);
 8002592:	f240 7107 	movw	r1, #1799	; 0x707
 8002596:	2030      	movs	r0, #48	; 0x30
 8002598:	f7ff fdde 	bl	8002158 <SSD1289_Write_Com_Data>
 800259c:	2001      	movs	r0, #1
 800259e:	f7fe fbd5 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0031,0x0204);    HAL_Delay(1);
 80025a2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80025a6:	2031      	movs	r0, #49	; 0x31
 80025a8:	f7ff fdd6 	bl	8002158 <SSD1289_Write_Com_Data>
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fbcd 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0032,0x0204);    HAL_Delay(1);
 80025b2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80025b6:	2032      	movs	r0, #50	; 0x32
 80025b8:	f7ff fdce 	bl	8002158 <SSD1289_Write_Com_Data>
 80025bc:	2001      	movs	r0, #1
 80025be:	f7fe fbc5 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0033,0x0502);    HAL_Delay(1);
 80025c2:	f240 5102 	movw	r1, #1282	; 0x502
 80025c6:	2033      	movs	r0, #51	; 0x33
 80025c8:	f7ff fdc6 	bl	8002158 <SSD1289_Write_Com_Data>
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fbbd 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0034,0x0507);    HAL_Delay(1);
 80025d2:	f240 5107 	movw	r1, #1287	; 0x507
 80025d6:	2034      	movs	r0, #52	; 0x34
 80025d8:	f7ff fdbe 	bl	8002158 <SSD1289_Write_Com_Data>
 80025dc:	2001      	movs	r0, #1
 80025de:	f7fe fbb5 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0035,0x0204);    HAL_Delay(1);
 80025e2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80025e6:	2035      	movs	r0, #53	; 0x35
 80025e8:	f7ff fdb6 	bl	8002158 <SSD1289_Write_Com_Data>
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7fe fbad 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0036,0x0204);    HAL_Delay(1);
 80025f2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80025f6:	2036      	movs	r0, #54	; 0x36
 80025f8:	f7ff fdae 	bl	8002158 <SSD1289_Write_Com_Data>
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fe fba5 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0037,0x0502);    HAL_Delay(1);
 8002602:	f240 5102 	movw	r1, #1282	; 0x502
 8002606:	2037      	movs	r0, #55	; 0x37
 8002608:	f7ff fda6 	bl	8002158 <SSD1289_Write_Com_Data>
 800260c:	2001      	movs	r0, #1
 800260e:	f7fe fb9d 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x003A,0x0302);    HAL_Delay(1);
 8002612:	f240 3102 	movw	r1, #770	; 0x302
 8002616:	203a      	movs	r0, #58	; 0x3a
 8002618:	f7ff fd9e 	bl	8002158 <SSD1289_Write_Com_Data>
 800261c:	2001      	movs	r0, #1
 800261e:	f7fe fb95 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x003B,0x0302);    HAL_Delay(1);
 8002622:	f240 3102 	movw	r1, #770	; 0x302
 8002626:	203b      	movs	r0, #59	; 0x3b
 8002628:	f7ff fd96 	bl	8002158 <SSD1289_Write_Com_Data>
 800262c:	2001      	movs	r0, #1
 800262e:	f7fe fb8d 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0023,0x0000);    HAL_Delay(1);
 8002632:	2100      	movs	r1, #0
 8002634:	2023      	movs	r0, #35	; 0x23
 8002636:	f7ff fd8f 	bl	8002158 <SSD1289_Write_Com_Data>
 800263a:	2001      	movs	r0, #1
 800263c:	f7fe fb86 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0024,0x0000);    HAL_Delay(1);
 8002640:	2100      	movs	r1, #0
 8002642:	2024      	movs	r0, #36	; 0x24
 8002644:	f7ff fd88 	bl	8002158 <SSD1289_Write_Com_Data>
 8002648:	2001      	movs	r0, #1
 800264a:	f7fe fb7f 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x0025,0x8000);    HAL_Delay(1);
 800264e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002652:	2025      	movs	r0, #37	; 0x25
 8002654:	f7ff fd80 	bl	8002158 <SSD1289_Write_Com_Data>
 8002658:	2001      	movs	r0, #1
 800265a:	f7fe fb77 	bl	8000d4c <HAL_Delay>
    SSD1289_Write_Com_Data(0x004f,0);
 800265e:	2100      	movs	r1, #0
 8002660:	204f      	movs	r0, #79	; 0x4f
 8002662:	f7ff fd79 	bl	8002158 <SSD1289_Write_Com_Data>
    SSD1289_Write_Com_Data(0x004e,0);
 8002666:	204e      	movs	r0, #78	; 0x4e
 8002668:	2100      	movs	r1, #0
 800266a:	f7ff fd75 	bl	8002158 <SSD1289_Write_Com_Data>
	SSD1289_Write_Com(0x0022);
 800266e:	2022      	movs	r0, #34	; 0x22
}
 8002670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SSD1289_Write_Com(0x0022);
 8002674:	f7ff bd1c 	b.w	80020b0 <SSD1289_Write_Com>
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40020400 	.word	0x40020400

08002680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_MspInit+0x8c>)
 8002684:	2400      	movs	r4, #0
 8002686:	9400      	str	r4, [sp, #0]
 8002688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
 8002690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002692:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	9401      	str	r4, [sp, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	f7fe fb60 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80026b4:	4622      	mov	r2, r4
 80026b6:	4621      	mov	r1, r4
 80026b8:	f06f 000b 	mvn.w	r0, #11
 80026bc:	f7fe fb6c 	bl	8000d98 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80026c0:	4622      	mov	r2, r4
 80026c2:	4621      	mov	r1, r4
 80026c4:	f06f 000a 	mvn.w	r0, #10
 80026c8:	f7fe fb66 	bl	8000d98 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80026cc:	4622      	mov	r2, r4
 80026ce:	4621      	mov	r1, r4
 80026d0:	f06f 0009 	mvn.w	r0, #9
 80026d4:	f7fe fb60 	bl	8000d98 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80026d8:	4622      	mov	r2, r4
 80026da:	4621      	mov	r1, r4
 80026dc:	f06f 0004 	mvn.w	r0, #4
 80026e0:	f7fe fb5a 	bl	8000d98 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80026e4:	4622      	mov	r2, r4
 80026e6:	4621      	mov	r1, r4
 80026e8:	f06f 0003 	mvn.w	r0, #3
 80026ec:	f7fe fb54 	bl	8000d98 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80026f0:	4622      	mov	r2, r4
 80026f2:	4621      	mov	r1, r4
 80026f4:	f06f 0001 	mvn.w	r0, #1
 80026f8:	f7fe fb4e 	bl	8000d98 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026fc:	4622      	mov	r2, r4
 80026fe:	4621      	mov	r1, r4
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7fe fb48 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002708:	b002      	add	sp, #8
 800270a:	bd10      	pop	{r4, pc}
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI3)
 8002712:	6802      	ldr	r2, [r0, #0]
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_SPI_MspInit+0x44>)
 8002716:	429a      	cmp	r2, r3
 8002718:	d119      	bne.n	800274e <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800271a:	2100      	movs	r1, #0
 800271c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002720:	9100      	str	r1, [sp, #0]
 8002722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002738:	2338      	movs	r3, #56	; 0x38
 800273a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002746:	2306      	movs	r3, #6
 8002748:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	f7fe fb81 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800274e:	b007      	add	sp, #28
 8002750:	f85d fb04 	ldr.w	pc, [sp], #4
 8002754:	40003c00 	.word	0x40003c00
 8002758:	40020400 	.word	0x40020400

0800275c <NMI_Handler>:
 800275c:	4770      	bx	lr

0800275e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800275e:	e7fe      	b.n	800275e <HardFault_Handler>

08002760 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002760:	e7fe      	b.n	8002760 <MemManage_Handler>

08002762 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002762:	e7fe      	b.n	8002762 <BusFault_Handler>

08002764 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler>

08002766 <SVC_Handler>:
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:
 8002768:	4770      	bx	lr

0800276a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800276c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276e:	f7fe fadb 	bl	8000d28 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002776:	f7fe bb66 	b.w	8000e46 <HAL_SYSTICK_IRQHandler>
	...

0800277c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800277c:	490f      	ldr	r1, [pc, #60]	; (80027bc <SystemInit+0x40>)
 800277e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002782:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <SystemInit+0x44>)
 800278c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800278e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002796:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800279e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <SystemInit+0x48>)
 80027a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027b6:	608b      	str	r3, [r1, #8]
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000ed00 	.word	0xe000ed00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	24003010 	.word	0x24003010

080027c8 <Read_IRQ>:
extern SPI_HandleTypeDef hspi3;
volatile uint8_t receive_data = 0;
volatile uint8_t send_cmd;

uint8_t Read_IRQ(){
	return HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80027c8:	2102      	movs	r1, #2
 80027ca:	4801      	ldr	r0, [pc, #4]	; (80027d0 <Read_IRQ+0x8>)
 80027cc:	f7fe bc20 	b.w	8001010 <HAL_GPIO_ReadPin>
 80027d0:	40020c00 	.word	0x40020c00

080027d4 <XPT2046_Read>:
}

uint16_t XPT2046_Read(uint8_t cmd){
 80027d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t coor;

	T_CSN;
 80027d8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002854 <XPT2046_Read+0x80>
	send_cmd = cmd;
 80027dc:	4c1a      	ldr	r4, [pc, #104]	; (8002848 <XPT2046_Read+0x74>)
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &send_cmd, 1, 1000);
 80027de:	4f1b      	ldr	r7, [pc, #108]	; (800284c <XPT2046_Read+0x78>)
	send_cmd = 0x00;
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 80027e0:	4e1b      	ldr	r6, [pc, #108]	; (8002850 <XPT2046_Read+0x7c>)
uint16_t XPT2046_Read(uint8_t cmd){
 80027e2:	4605      	mov	r5, r0
	T_CSN;
 80027e4:	2200      	movs	r2, #0
 80027e6:	4640      	mov	r0, r8
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	f7fe fc17 	bl	800101c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 80027ee:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &send_cmd, 1, 1000);
 80027f2:	4621      	mov	r1, r4
 80027f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f8:	2201      	movs	r2, #1
 80027fa:	4638      	mov	r0, r7
	send_cmd = cmd;
 80027fc:	7025      	strb	r5, [r4, #0]
	send_cmd = 0x00;
 80027fe:	f04f 0a00 	mov.w	sl, #0
	HAL_SPI_Transmit(&hspi3, (uint8_t*) &send_cmd, 1, 1000);
 8002802:	f7fe fef5 	bl	80015f0 <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 8002806:	4632      	mov	r2, r6
 8002808:	4621      	mov	r1, r4
 800280a:	f8cd 9000 	str.w	r9, [sp]
 800280e:	2301      	movs	r3, #1
 8002810:	4638      	mov	r0, r7
	send_cmd = 0x00;
 8002812:	f884 a000 	strb.w	sl, [r4]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 8002816:	f7fe ff94 	bl	8001742 <HAL_SPI_TransmitReceive>
	coor = (uint16_t) receive_data;
 800281a:	7835      	ldrb	r5, [r6, #0]
	coor = coor << 8;
	send_cmd = 0x00;
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 800281c:	f8cd 9000 	str.w	r9, [sp]
 8002820:	4632      	mov	r2, r6
 8002822:	4621      	mov	r1, r4
 8002824:	2301      	movs	r3, #1
 8002826:	4638      	mov	r0, r7
	send_cmd = 0x00;
 8002828:	f884 a000 	strb.w	sl, [r4]
	HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &send_cmd, (uint8_t*) &receive_data, 1, 1000);
 800282c:	f7fe ff89 	bl	8001742 <HAL_SPI_TransmitReceive>
	coor = coor | (uint16_t) receive_data;
 8002830:	7833      	ldrb	r3, [r6, #0]
	coor = coor >> 3;
	T_CS;
 8002832:	4640      	mov	r0, r8
 8002834:	2201      	movs	r2, #1
 8002836:	2180      	movs	r1, #128	; 0x80
	coor = coor << 8;
 8002838:	022d      	lsls	r5, r5, #8
	coor = coor | (uint16_t) receive_data;
 800283a:	431d      	orrs	r5, r3
	T_CS;
 800283c:	f7fe fbee 	bl	800101c <HAL_GPIO_WritePin>

	return coor;
}
 8002840:	08e8      	lsrs	r0, r5, #3
 8002842:	b002      	add	sp, #8
 8002844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002848:	200027a2 	.word	0x200027a2
 800284c:	2000272c 	.word	0x2000272c
 8002850:	2000271a 	.word	0x2000271a
 8002854:	40020c00 	.word	0x40020c00

08002858 <XPT2046_Calibrate>:

/*sel = 0: Tinh toa do x
  sel != 0: Tinh toa do y
	coor: toa do nhan duoc*/
uint16_t  XPT2046_Calibrate(uint16_t coor, uint16_t r){
 8002858:	b508      	push	{r3, lr}
 800285a:	f5a0 73eb 	sub.w	r3, r0, #470	; 0x1d6
 800285e:	ee07 3a90 	vmov	s15, r3
	uint16_t temp = 0;

	if(r == 1){
 8002862:	2901      	cmp	r1, #1
		temp = (uint16_t) (LCD_WID * ((float)(coor - X_T_MIN)/T_WIDTH));
 8002864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if(r == 1){
 8002868:	d110      	bne.n	800288c <XPT2046_Calibrate+0x34>
		temp = (uint16_t) (LCD_WID * ((float)(coor - X_T_MIN)/T_WIDTH));
 800286a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028b8 <XPT2046_Calibrate+0x60>
 800286e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002872:	ee16 0a90 	vmov	r0, s13
 8002876:	f7fd fe0b 	bl	8000490 <__aeabi_f2d>
 800287a:	a30b      	add	r3, pc, #44	; (adr r3, 80028a8 <XPT2046_Calibrate+0x50>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
	else{
		temp = (uint16_t) (LCD_HEI * ((float)(coor - Y_T_MIN)/T_HEIGH));
 8002880:	f7fd fe5a 	bl	8000538 <__aeabi_dmul>
 8002884:	f7fe f86a 	bl	800095c <__aeabi_d2uiz>
 8002888:	b280      	uxth	r0, r0
	}

	return temp;
}
 800288a:	bd08      	pop	{r3, pc}
		temp = (uint16_t) (LCD_HEI * ((float)(coor - Y_T_MIN)/T_HEIGH));
 800288c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80028bc <XPT2046_Calibrate+0x64>
 8002890:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002894:	ee16 0a90 	vmov	r0, s13
 8002898:	f7fd fdfa 	bl	8000490 <__aeabi_f2d>
 800289c:	a304      	add	r3, pc, #16	; (adr r3, 80028b0 <XPT2046_Calibrate+0x58>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	e7ed      	b.n	8002880 <XPT2046_Calibrate+0x28>
 80028a4:	f3af 8000 	nop.w
 80028a8:	00000000 	.word	0x00000000
 80028ac:	4073f000 	.word	0x4073f000
 80028b0:	00000000 	.word	0x00000000
 80028b4:	406de000 	.word	0x406de000
 80028b8:	4549e000 	.word	0x4549e000
 80028bc:	453ea000 	.word	0x453ea000

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028c6:	e003      	b.n	80028d0 <LoopCopyDataInit>

080028c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028ce:	3104      	adds	r1, #4

080028d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028d0:	480b      	ldr	r0, [pc, #44]	; (8002900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028d8:	d3f6      	bcc.n	80028c8 <CopyDataInit>
  ldr  r2, =_sbss
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028dc:	e002      	b.n	80028e4 <LoopFillZerobss>

080028de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028e0:	f842 3b04 	str.w	r3, [r2], #4

080028e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028e8:	d3f9      	bcc.n	80028de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028ea:	f7ff ff47 	bl	800277c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ee:	f000 f811 	bl	8002914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7ff fa69 	bl	8001dc8 <main>
  bx  lr    
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028fc:	08002b80 	.word	0x08002b80
  ldr  r0, =_sdata
 8002900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002904:	200026ec 	.word	0x200026ec
  ldr  r2, =_sbss
 8002908:	200026ec 	.word	0x200026ec
  ldr  r3, = _ebss
 800290c:	200027a8 	.word	0x200027a8

08002910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC_IRQHandler>
	...

08002914 <__libc_init_array>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	4e0d      	ldr	r6, [pc, #52]	; (800294c <__libc_init_array+0x38>)
 8002918:	4c0d      	ldr	r4, [pc, #52]	; (8002950 <__libc_init_array+0x3c>)
 800291a:	1ba4      	subs	r4, r4, r6
 800291c:	10a4      	asrs	r4, r4, #2
 800291e:	2500      	movs	r5, #0
 8002920:	42a5      	cmp	r5, r4
 8002922:	d109      	bne.n	8002938 <__libc_init_array+0x24>
 8002924:	4e0b      	ldr	r6, [pc, #44]	; (8002954 <__libc_init_array+0x40>)
 8002926:	4c0c      	ldr	r4, [pc, #48]	; (8002958 <__libc_init_array+0x44>)
 8002928:	f000 f8d8 	bl	8002adc <_init>
 800292c:	1ba4      	subs	r4, r4, r6
 800292e:	10a4      	asrs	r4, r4, #2
 8002930:	2500      	movs	r5, #0
 8002932:	42a5      	cmp	r5, r4
 8002934:	d105      	bne.n	8002942 <__libc_init_array+0x2e>
 8002936:	bd70      	pop	{r4, r5, r6, pc}
 8002938:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800293c:	4798      	blx	r3
 800293e:	3501      	adds	r5, #1
 8002940:	e7ee      	b.n	8002920 <__libc_init_array+0xc>
 8002942:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002946:	4798      	blx	r3
 8002948:	3501      	adds	r5, #1
 800294a:	e7f2      	b.n	8002932 <__libc_init_array+0x1e>
 800294c:	08002b78 	.word	0x08002b78
 8002950:	08002b78 	.word	0x08002b78
 8002954:	08002b78 	.word	0x08002b78
 8002958:	08002b7c 	.word	0x08002b7c

0800295c <rand>:
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <rand+0x68>)
 800295e:	b510      	push	{r4, lr}
 8002960:	681c      	ldr	r4, [r3, #0]
 8002962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002964:	b9d3      	cbnz	r3, 800299c <rand+0x40>
 8002966:	2018      	movs	r0, #24
 8002968:	f000 f832 	bl	80029d0 <malloc>
 800296c:	f243 330e 	movw	r3, #13070	; 0x330e
 8002970:	63a0      	str	r0, [r4, #56]	; 0x38
 8002972:	8003      	strh	r3, [r0, #0]
 8002974:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8002978:	8043      	strh	r3, [r0, #2]
 800297a:	f241 2334 	movw	r3, #4660	; 0x1234
 800297e:	8083      	strh	r3, [r0, #4]
 8002980:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8002984:	80c3      	strh	r3, [r0, #6]
 8002986:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800298a:	8103      	strh	r3, [r0, #8]
 800298c:	2305      	movs	r3, #5
 800298e:	8143      	strh	r3, [r0, #10]
 8002990:	230b      	movs	r3, #11
 8002992:	8183      	strh	r3, [r0, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	2300      	movs	r3, #0
 8002998:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800299c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <rand+0x6c>)
 80029a0:	690a      	ldr	r2, [r1, #16]
 80029a2:	694b      	ldr	r3, [r1, #20]
 80029a4:	4c09      	ldr	r4, [pc, #36]	; (80029cc <rand+0x70>)
 80029a6:	4350      	muls	r0, r2
 80029a8:	fb04 0003 	mla	r0, r4, r3, r0
 80029ac:	fba2 2304 	umull	r2, r3, r2, r4
 80029b0:	3201      	adds	r2, #1
 80029b2:	4403      	add	r3, r0
 80029b4:	f143 0300 	adc.w	r3, r3, #0
 80029b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80029bc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	bf00      	nop
 80029c4:	20002688 	.word	0x20002688
 80029c8:	5851f42d 	.word	0x5851f42d
 80029cc:	4c957f2d 	.word	0x4c957f2d

080029d0 <malloc>:
 80029d0:	4b02      	ldr	r3, [pc, #8]	; (80029dc <malloc+0xc>)
 80029d2:	4601      	mov	r1, r0
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	f000 b803 	b.w	80029e0 <_malloc_r>
 80029da:	bf00      	nop
 80029dc:	20002688 	.word	0x20002688

080029e0 <_malloc_r>:
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	1ccd      	adds	r5, r1, #3
 80029e4:	f025 0503 	bic.w	r5, r5, #3
 80029e8:	3508      	adds	r5, #8
 80029ea:	2d0c      	cmp	r5, #12
 80029ec:	bf38      	it	cc
 80029ee:	250c      	movcc	r5, #12
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	4606      	mov	r6, r0
 80029f4:	db01      	blt.n	80029fa <_malloc_r+0x1a>
 80029f6:	42a9      	cmp	r1, r5
 80029f8:	d903      	bls.n	8002a02 <_malloc_r+0x22>
 80029fa:	230c      	movs	r3, #12
 80029fc:	6033      	str	r3, [r6, #0]
 80029fe:	2000      	movs	r0, #0
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	f000 f85b 	bl	8002abc <__malloc_lock>
 8002a06:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <_malloc_r+0xb4>)
 8002a08:	6814      	ldr	r4, [r2, #0]
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	b991      	cbnz	r1, 8002a34 <_malloc_r+0x54>
 8002a0e:	4c22      	ldr	r4, [pc, #136]	; (8002a98 <_malloc_r+0xb8>)
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	b91b      	cbnz	r3, 8002a1c <_malloc_r+0x3c>
 8002a14:	4630      	mov	r0, r6
 8002a16:	f000 f841 	bl	8002a9c <_sbrk_r>
 8002a1a:	6020      	str	r0, [r4, #0]
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	4630      	mov	r0, r6
 8002a20:	f000 f83c 	bl	8002a9c <_sbrk_r>
 8002a24:	1c43      	adds	r3, r0, #1
 8002a26:	d126      	bne.n	8002a76 <_malloc_r+0x96>
 8002a28:	230c      	movs	r3, #12
 8002a2a:	6033      	str	r3, [r6, #0]
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f846 	bl	8002abe <__malloc_unlock>
 8002a32:	e7e4      	b.n	80029fe <_malloc_r+0x1e>
 8002a34:	680b      	ldr	r3, [r1, #0]
 8002a36:	1b5b      	subs	r3, r3, r5
 8002a38:	d41a      	bmi.n	8002a70 <_malloc_r+0x90>
 8002a3a:	2b0b      	cmp	r3, #11
 8002a3c:	d90f      	bls.n	8002a5e <_malloc_r+0x7e>
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	50cd      	str	r5, [r1, r3]
 8002a42:	18cc      	adds	r4, r1, r3
 8002a44:	4630      	mov	r0, r6
 8002a46:	f000 f83a 	bl	8002abe <__malloc_unlock>
 8002a4a:	f104 000b 	add.w	r0, r4, #11
 8002a4e:	1d23      	adds	r3, r4, #4
 8002a50:	f020 0007 	bic.w	r0, r0, #7
 8002a54:	1ac3      	subs	r3, r0, r3
 8002a56:	d01b      	beq.n	8002a90 <_malloc_r+0xb0>
 8002a58:	425a      	negs	r2, r3
 8002a5a:	50e2      	str	r2, [r4, r3]
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	428c      	cmp	r4, r1
 8002a60:	bf0d      	iteet	eq
 8002a62:	6863      	ldreq	r3, [r4, #4]
 8002a64:	684b      	ldrne	r3, [r1, #4]
 8002a66:	6063      	strne	r3, [r4, #4]
 8002a68:	6013      	streq	r3, [r2, #0]
 8002a6a:	bf18      	it	ne
 8002a6c:	460c      	movne	r4, r1
 8002a6e:	e7e9      	b.n	8002a44 <_malloc_r+0x64>
 8002a70:	460c      	mov	r4, r1
 8002a72:	6849      	ldr	r1, [r1, #4]
 8002a74:	e7ca      	b.n	8002a0c <_malloc_r+0x2c>
 8002a76:	1cc4      	adds	r4, r0, #3
 8002a78:	f024 0403 	bic.w	r4, r4, #3
 8002a7c:	42a0      	cmp	r0, r4
 8002a7e:	d005      	beq.n	8002a8c <_malloc_r+0xac>
 8002a80:	1a21      	subs	r1, r4, r0
 8002a82:	4630      	mov	r0, r6
 8002a84:	f000 f80a 	bl	8002a9c <_sbrk_r>
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d0cd      	beq.n	8002a28 <_malloc_r+0x48>
 8002a8c:	6025      	str	r5, [r4, #0]
 8002a8e:	e7d9      	b.n	8002a44 <_malloc_r+0x64>
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
 8002a92:	bf00      	nop
 8002a94:	2000271c 	.word	0x2000271c
 8002a98:	20002720 	.word	0x20002720

08002a9c <_sbrk_r>:
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4c06      	ldr	r4, [pc, #24]	; (8002ab8 <_sbrk_r+0x1c>)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	6023      	str	r3, [r4, #0]
 8002aa8:	f000 f80a 	bl	8002ac0 <_sbrk>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d102      	bne.n	8002ab6 <_sbrk_r+0x1a>
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	b103      	cbz	r3, 8002ab6 <_sbrk_r+0x1a>
 8002ab4:	602b      	str	r3, [r5, #0]
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	200027a4 	.word	0x200027a4

08002abc <__malloc_lock>:
 8002abc:	4770      	bx	lr

08002abe <__malloc_unlock>:
 8002abe:	4770      	bx	lr

08002ac0 <_sbrk>:
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <_sbrk+0x14>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	b909      	cbnz	r1, 8002acc <_sbrk+0xc>
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <_sbrk+0x18>)
 8002aca:	6019      	str	r1, [r3, #0]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	4402      	add	r2, r0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	4770      	bx	lr
 8002ad4:	20002724 	.word	0x20002724
 8002ad8:	200027a8 	.word	0x200027a8

08002adc <_init>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr

08002ae8 <_fini>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr
